/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.RunnercliAccessLinkE', null, global);
goog.exportSymbol('proto.v1.RunnercliContainerE', null, global);
goog.exportSymbol('proto.v1.RunnercliObjectMetaE', null, global);
goog.exportSymbol('proto.v1.RunnercliPodE', null, global);
goog.exportSymbol('proto.v1.RunnercliSoftwareSpecE', null, global);
goog.exportSymbol('proto.v1.RunnercliSoftwareSpecOSType', null, global);
goog.exportSymbol('proto.v1.RunnercliSoftwareSpecTemplateType', null, global);
goog.exportSymbol('proto.v1.RunnercliTypeMetaE', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliContainerE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RunnercliContainerE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliContainerE.displayName = 'proto.v1.RunnercliContainerE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliAccessLinkE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RunnercliAccessLinkE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliAccessLinkE.displayName = 'proto.v1.RunnercliAccessLinkE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliPodE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.RunnercliPodE.repeatedFields_, null);
};
goog.inherits(proto.v1.RunnercliPodE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliPodE.displayName = 'proto.v1.RunnercliPodE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliObjectMetaE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RunnercliObjectMetaE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliObjectMetaE.displayName = 'proto.v1.RunnercliObjectMetaE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliTypeMetaE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RunnercliTypeMetaE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliTypeMetaE.displayName = 'proto.v1.RunnercliTypeMetaE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RunnercliSoftwareSpecE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RunnercliSoftwareSpecE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.RunnercliSoftwareSpecE.displayName = 'proto.v1.RunnercliSoftwareSpecE';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliContainerE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliContainerE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliContainerE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliContainerE.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    imagename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    podname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    containername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    accesslink: (f = msg.getAccesslink()) && proto.v1.RunnercliAccessLinkE.toObject(includeInstance, f),
    islive: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    status: jspb.Message.getFieldWithDefault(msg, 9, ""),
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliContainerE}
 */
proto.v1.RunnercliContainerE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliContainerE;
  return proto.v1.RunnercliContainerE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliContainerE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliContainerE}
 */
proto.v1.RunnercliContainerE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPodname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainername(value);
      break;
    case 7:
      var value = new proto.v1.RunnercliAccessLinkE;
      reader.readMessage(value,proto.v1.RunnercliAccessLinkE.deserializeBinaryFromReader);
      msg.setAccesslink(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslive(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliContainerE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliContainerE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliContainerE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliContainerE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImagename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPodname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContainername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAccesslink();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.v1.RunnercliAccessLinkE.serializeBinaryToWriter
    );
  }
  f = message.getIslive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string imageName = 3;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getImagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setImagename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string namespace = 4;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string podName = 5;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getPodname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setPodname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string containerName = 6;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getContainername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setContainername = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional RunnercliAccessLinkE accessLink = 7;
 * @return {?proto.v1.RunnercliAccessLinkE}
 */
proto.v1.RunnercliContainerE.prototype.getAccesslink = function() {
  return /** @type{?proto.v1.RunnercliAccessLinkE} */ (
    jspb.Message.getWrapperField(this, proto.v1.RunnercliAccessLinkE, 7));
};


/** @param {?proto.v1.RunnercliAccessLinkE|undefined} value */
proto.v1.RunnercliContainerE.prototype.setAccesslink = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.RunnercliContainerE.prototype.clearAccesslink = function() {
  this.setAccesslink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.RunnercliContainerE.prototype.hasAccesslink = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool isLive = 8;
 * @return {boolean}
 */
proto.v1.RunnercliContainerE.prototype.getIslive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.v1.RunnercliContainerE.prototype.setIslive = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string status = 9;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string creationTimestamp = 10;
 * @return {string}
 */
proto.v1.RunnercliContainerE.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.v1.RunnercliContainerE.prototype.setCreationtimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliAccessLinkE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliAccessLinkE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliAccessLinkE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliAccessLinkE.toObject = function(includeInstance, msg) {
  var f, obj = {
    workspace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    terminal: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliAccessLinkE}
 */
proto.v1.RunnercliAccessLinkE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliAccessLinkE;
  return proto.v1.RunnercliAccessLinkE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliAccessLinkE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliAccessLinkE}
 */
proto.v1.RunnercliAccessLinkE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliAccessLinkE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliAccessLinkE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliAccessLinkE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliAccessLinkE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string workspace = 1;
 * @return {string}
 */
proto.v1.RunnercliAccessLinkE.prototype.getWorkspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.RunnercliAccessLinkE.prototype.setWorkspace = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string terminal = 2;
 * @return {string}
 */
proto.v1.RunnercliAccessLinkE.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.RunnercliAccessLinkE.prototype.setTerminal = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.RunnercliPodE.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliPodE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliPodE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliPodE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliPodE.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectmeta: (f = msg.getObjectmeta()) && proto.v1.RunnercliObjectMetaE.toObject(includeInstance, f),
    typemeta: (f = msg.getTypemeta()) && proto.v1.RunnercliTypeMetaE.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    restartcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nodename: jspb.Message.getFieldWithDefault(msg, 5, ""),
    containerimagesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliPodE}
 */
proto.v1.RunnercliPodE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliPodE;
  return proto.v1.RunnercliPodE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliPodE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliPodE}
 */
proto.v1.RunnercliPodE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.RunnercliObjectMetaE;
      reader.readMessage(value,proto.v1.RunnercliObjectMetaE.deserializeBinaryFromReader);
      msg.setObjectmeta(value);
      break;
    case 2:
      var value = new proto.v1.RunnercliTypeMetaE;
      reader.readMessage(value,proto.v1.RunnercliTypeMetaE.deserializeBinaryFromReader);
      msg.setTypemeta(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRestartcount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodename(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addContainerimages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliPodE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliPodE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliPodE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliPodE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectmeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.RunnercliObjectMetaE.serializeBinaryToWriter
    );
  }
  f = message.getTypemeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.RunnercliTypeMetaE.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRestartcount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNodename();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContainerimagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional RunnercliObjectMetaE objectMeta = 1;
 * @return {?proto.v1.RunnercliObjectMetaE}
 */
proto.v1.RunnercliPodE.prototype.getObjectmeta = function() {
  return /** @type{?proto.v1.RunnercliObjectMetaE} */ (
    jspb.Message.getWrapperField(this, proto.v1.RunnercliObjectMetaE, 1));
};


/** @param {?proto.v1.RunnercliObjectMetaE|undefined} value */
proto.v1.RunnercliPodE.prototype.setObjectmeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.RunnercliPodE.prototype.clearObjectmeta = function() {
  this.setObjectmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.RunnercliPodE.prototype.hasObjectmeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RunnercliTypeMetaE typeMeta = 2;
 * @return {?proto.v1.RunnercliTypeMetaE}
 */
proto.v1.RunnercliPodE.prototype.getTypemeta = function() {
  return /** @type{?proto.v1.RunnercliTypeMetaE} */ (
    jspb.Message.getWrapperField(this, proto.v1.RunnercliTypeMetaE, 2));
};


/** @param {?proto.v1.RunnercliTypeMetaE|undefined} value */
proto.v1.RunnercliPodE.prototype.setTypemeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.RunnercliPodE.prototype.clearTypemeta = function() {
  this.setTypemeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.RunnercliPodE.prototype.hasTypemeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.v1.RunnercliPodE.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.RunnercliPodE.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 restartCount = 4;
 * @return {number}
 */
proto.v1.RunnercliPodE.prototype.getRestartcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.RunnercliPodE.prototype.setRestartcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string nodeName = 5;
 * @return {string}
 */
proto.v1.RunnercliPodE.prototype.getNodename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.v1.RunnercliPodE.prototype.setNodename = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string containerImages = 6;
 * @return {!Array<string>}
 */
proto.v1.RunnercliPodE.prototype.getContainerimagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.v1.RunnercliPodE.prototype.setContainerimagesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.v1.RunnercliPodE.prototype.addContainerimages = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.RunnercliPodE.prototype.clearContainerimagesList = function() {
  this.setContainerimagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliObjectMetaE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliObjectMetaE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliObjectMetaE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliObjectMetaE.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliObjectMetaE}
 */
proto.v1.RunnercliObjectMetaE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliObjectMetaE;
  return proto.v1.RunnercliObjectMetaE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliObjectMetaE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliObjectMetaE}
 */
proto.v1.RunnercliObjectMetaE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationtimestamp(value);
      break;
    case 5:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliObjectMetaE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliObjectMetaE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliObjectMetaE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliObjectMetaE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.v1.RunnercliObjectMetaE.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.RunnercliObjectMetaE.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.v1.RunnercliObjectMetaE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.RunnercliObjectMetaE.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string namespace = 3;
 * @return {string}
 */
proto.v1.RunnercliObjectMetaE.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.RunnercliObjectMetaE.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string creationTimestamp = 4;
 * @return {string}
 */
proto.v1.RunnercliObjectMetaE.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.RunnercliObjectMetaE.prototype.setCreationtimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> labels = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.v1.RunnercliObjectMetaE.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.v1.RunnercliObjectMetaE.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliTypeMetaE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliTypeMetaE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliTypeMetaE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliTypeMetaE.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliTypeMetaE}
 */
proto.v1.RunnercliTypeMetaE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliTypeMetaE;
  return proto.v1.RunnercliTypeMetaE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliTypeMetaE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliTypeMetaE}
 */
proto.v1.RunnercliTypeMetaE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliTypeMetaE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliTypeMetaE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliTypeMetaE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliTypeMetaE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.v1.RunnercliTypeMetaE.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.RunnercliTypeMetaE.prototype.setKind = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.RunnercliSoftwareSpecE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.RunnercliSoftwareSpecE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.RunnercliSoftwareSpecE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliSoftwareSpecE.toObject = function(includeInstance, msg) {
  var f, obj = {
    os: jspb.Message.getFieldWithDefault(msg, 1, 0),
    template: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RunnercliSoftwareSpecE}
 */
proto.v1.RunnercliSoftwareSpecE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.RunnercliSoftwareSpecE;
  return proto.v1.RunnercliSoftwareSpecE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RunnercliSoftwareSpecE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RunnercliSoftwareSpecE}
 */
proto.v1.RunnercliSoftwareSpecE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v1.RunnercliSoftwareSpecOSType} */ (reader.readEnum());
      msg.setOs(value);
      break;
    case 2:
      var value = /** @type {!proto.v1.RunnercliSoftwareSpecTemplateType} */ (reader.readEnum());
      msg.setTemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RunnercliSoftwareSpecE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.RunnercliSoftwareSpecE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RunnercliSoftwareSpecE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RunnercliSoftwareSpecE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOs();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTemplate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional RunnercliSoftwareSpecOSType os = 1;
 * @return {!proto.v1.RunnercliSoftwareSpecOSType}
 */
proto.v1.RunnercliSoftwareSpecE.prototype.getOs = function() {
  return /** @type {!proto.v1.RunnercliSoftwareSpecOSType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.v1.RunnercliSoftwareSpecOSType} value */
proto.v1.RunnercliSoftwareSpecE.prototype.setOs = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RunnercliSoftwareSpecTemplateType template = 2;
 * @return {!proto.v1.RunnercliSoftwareSpecTemplateType}
 */
proto.v1.RunnercliSoftwareSpecE.prototype.getTemplate = function() {
  return /** @type {!proto.v1.RunnercliSoftwareSpecTemplateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.v1.RunnercliSoftwareSpecTemplateType} value */
proto.v1.RunnercliSoftwareSpecE.prototype.setTemplate = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.v1.RunnercliSoftwareSpecOSType = {
  UBUNTU_18_04: 0
};

/**
 * @enum {number}
 */
proto.v1.RunnercliSoftwareSpecTemplateType = {
  GOLANG: 0,
  PYTHON: 1,
  TYPESCRIPT: 2
};

goog.object.extend(exports, proto.v1);
