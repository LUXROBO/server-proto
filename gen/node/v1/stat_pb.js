/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var v1_base_pb = require('../v1/base_pb.js');
goog.object.extend(proto, v1_base_pb);
goog.exportSymbol('proto.v1.StatCapacityE', null, global);
goog.exportSymbol('proto.v1.StatCapacityInfoE', null, global);
goog.exportSymbol('proto.v1.StatCapacityMeanE', null, global);
goog.exportSymbol('proto.v1.StatCapacityWeeklyE', null, global);
goog.exportSymbol('proto.v1.StatLessonActivityE', null, global);
goog.exportSymbol('proto.v1.StatLessonContentE', null, global);
goog.exportSymbol('proto.v1.StatLessonPlanContentActivityE', null, global);
goog.exportSymbol('proto.v1.StatRateE', null, global);
goog.exportSymbol('proto.v1.StatStudyTimeE', null, global);
goog.exportSymbol('proto.v1.StatUserLessonCountE', null, global);
goog.exportSymbol('proto.v1.StatUserSummaryE', null, global);
goog.exportSymbol('proto.v1.StatUserViewE', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatLessonActivityE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.StatLessonActivityE.repeatedFields_, null);
};
goog.inherits(proto.v1.StatLessonActivityE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatLessonActivityE.displayName = 'proto.v1.StatLessonActivityE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatLessonPlanContentActivityE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatLessonPlanContentActivityE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatLessonPlanContentActivityE.displayName = 'proto.v1.StatLessonPlanContentActivityE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatUserSummaryE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatUserSummaryE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatUserSummaryE.displayName = 'proto.v1.StatUserSummaryE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatUserLessonCountE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatUserLessonCountE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatUserLessonCountE.displayName = 'proto.v1.StatUserLessonCountE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatRateE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatRateE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatRateE.displayName = 'proto.v1.StatRateE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatStudyTimeE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatStudyTimeE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatStudyTimeE.displayName = 'proto.v1.StatStudyTimeE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatCapacityMeanE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatCapacityMeanE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatCapacityMeanE.displayName = 'proto.v1.StatCapacityMeanE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatCapacityWeeklyE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.StatCapacityWeeklyE.repeatedFields_, null);
};
goog.inherits(proto.v1.StatCapacityWeeklyE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatCapacityWeeklyE.displayName = 'proto.v1.StatCapacityWeeklyE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatCapacityInfoE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatCapacityInfoE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatCapacityInfoE.displayName = 'proto.v1.StatCapacityInfoE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatCapacityE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatCapacityE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatCapacityE.displayName = 'proto.v1.StatCapacityE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatUserViewE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatUserViewE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatUserViewE.displayName = 'proto.v1.StatUserViewE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.StatLessonContentE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.StatLessonContentE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.StatLessonContentE.displayName = 'proto.v1.StatLessonContentE';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.StatLessonActivityE.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatLessonActivityE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatLessonActivityE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatLessonActivityE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonActivityE.toObject = function(includeInstance, msg) {
  var f, obj = {
    lessonid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cbookmark: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clike: jspb.Message.getFieldWithDefault(msg, 3, 0),
    progress: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lessonplancontentactivitiesList: jspb.Message.toObjectList(msg.getLessonplancontentactivitiesList(),
    proto.v1.StatLessonPlanContentActivityE.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatLessonActivityE}
 */
proto.v1.StatLessonActivityE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatLessonActivityE;
  return proto.v1.StatLessonActivityE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatLessonActivityE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatLessonActivityE}
 */
proto.v1.StatLessonActivityE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessonid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCbookmark(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClike(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgress(value);
      break;
    case 5:
      var value = new proto.v1.StatLessonPlanContentActivityE;
      reader.readMessage(value,proto.v1.StatLessonPlanContentActivityE.deserializeBinaryFromReader);
      msg.addLessonplancontentactivities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatLessonActivityE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatLessonActivityE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatLessonActivityE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonActivityE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLessonid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCbookmark();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClike();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLessonplancontentactivitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.StatLessonPlanContentActivityE.serializeBinaryToWriter
    );
  }
};


/**
 * optional string lessonId = 1;
 * @return {string}
 */
proto.v1.StatLessonActivityE.prototype.getLessonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.StatLessonActivityE.prototype.setLessonid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 cBookmark = 2;
 * @return {number}
 */
proto.v1.StatLessonActivityE.prototype.getCbookmark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.StatLessonActivityE.prototype.setCbookmark = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 cLike = 3;
 * @return {number}
 */
proto.v1.StatLessonActivityE.prototype.getClike = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.StatLessonActivityE.prototype.setClike = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 progress = 4;
 * @return {number}
 */
proto.v1.StatLessonActivityE.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.StatLessonActivityE.prototype.setProgress = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated StatLessonPlanContentActivityE lessonPlanContentActivities = 5;
 * @return {!Array<!proto.v1.StatLessonPlanContentActivityE>}
 */
proto.v1.StatLessonActivityE.prototype.getLessonplancontentactivitiesList = function() {
  return /** @type{!Array<!proto.v1.StatLessonPlanContentActivityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatLessonPlanContentActivityE, 5));
};


/** @param {!Array<!proto.v1.StatLessonPlanContentActivityE>} value */
proto.v1.StatLessonActivityE.prototype.setLessonplancontentactivitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.StatLessonPlanContentActivityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatLessonPlanContentActivityE}
 */
proto.v1.StatLessonActivityE.prototype.addLessonplancontentactivities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.StatLessonPlanContentActivityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatLessonActivityE.prototype.clearLessonplancontentactivitiesList = function() {
  this.setLessonplancontentactivitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatLessonPlanContentActivityE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatLessonPlanContentActivityE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonPlanContentActivityE.toObject = function(includeInstance, msg) {
  var f, obj = {
    lessonid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lessonplancontentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isdone: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    donedate: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatLessonPlanContentActivityE}
 */
proto.v1.StatLessonPlanContentActivityE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatLessonPlanContentActivityE;
  return proto.v1.StatLessonPlanContentActivityE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatLessonPlanContentActivityE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatLessonPlanContentActivityE}
 */
proto.v1.StatLessonPlanContentActivityE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessonid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessonplancontentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeconds(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDonedate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatLessonPlanContentActivityE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatLessonPlanContentActivityE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonPlanContentActivityE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLessonid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLessonplancontentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsdone();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDonedate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string lessonId = 1;
 * @return {string}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.getLessonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.StatLessonPlanContentActivityE.prototype.setLessonid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lessonPlanContentId = 2;
 * @return {string}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.getLessonplancontentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.StatLessonPlanContentActivityE.prototype.setLessonplancontentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 seconds = 3;
 * @return {number}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.StatLessonPlanContentActivityE.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isDone = 4;
 * @return {boolean}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.getIsdone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.v1.StatLessonPlanContentActivityE.prototype.setIsdone = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string doneDate = 5;
 * @return {string}
 */
proto.v1.StatLessonPlanContentActivityE.prototype.getDonedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.v1.StatLessonPlanContentActivityE.prototype.setDonedate = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatUserSummaryE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatUserSummaryE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatUserSummaryE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserSummaryE.toObject = function(includeInstance, msg) {
  var f, obj = {
    no: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cretry: jspb.Message.getFieldWithDefault(msg, 5, 0),
    csuccess: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    etime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    studytime: (f = msg.getStudytime()) && proto.v1.StatStudyTimeE.toObject(includeInstance, f),
    rate: (f = msg.getRate()) && proto.v1.StatRateE.toObject(includeInstance, f),
    capacitymean: (f = msg.getCapacitymean()) && proto.v1.StatCapacityMeanE.toObject(includeInstance, f),
    capacityweekly: (f = msg.getCapacityweekly()) && proto.v1.StatCapacityWeeklyE.toObject(includeInstance, f),
    lessoncount: (f = msg.getLessoncount()) && proto.v1.StatUserLessonCountE.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatUserSummaryE}
 */
proto.v1.StatUserSummaryE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatUserSummaryE;
  return proto.v1.StatUserSummaryE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatUserSummaryE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatUserSummaryE}
 */
proto.v1.StatUserSummaryE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCretry(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCsuccess(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEtime(value);
      break;
    case 9:
      var value = new proto.v1.StatStudyTimeE;
      reader.readMessage(value,proto.v1.StatStudyTimeE.deserializeBinaryFromReader);
      msg.setStudytime(value);
      break;
    case 10:
      var value = new proto.v1.StatRateE;
      reader.readMessage(value,proto.v1.StatRateE.deserializeBinaryFromReader);
      msg.setRate(value);
      break;
    case 11:
      var value = new proto.v1.StatCapacityMeanE;
      reader.readMessage(value,proto.v1.StatCapacityMeanE.deserializeBinaryFromReader);
      msg.setCapacitymean(value);
      break;
    case 12:
      var value = new proto.v1.StatCapacityWeeklyE;
      reader.readMessage(value,proto.v1.StatCapacityWeeklyE.deserializeBinaryFromReader);
      msg.setCapacityweekly(value);
      break;
    case 13:
      var value = new proto.v1.StatUserLessonCountE;
      reader.readMessage(value,proto.v1.StatUserLessonCountE.deserializeBinaryFromReader);
      msg.setLessoncount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatUserSummaryE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatUserSummaryE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatUserSummaryE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserSummaryE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNo();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserno();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCretry();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCsuccess();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEtime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStudytime();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.v1.StatStudyTimeE.serializeBinaryToWriter
    );
  }
  f = message.getRate();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.v1.StatRateE.serializeBinaryToWriter
    );
  }
  f = message.getCapacitymean();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.v1.StatCapacityMeanE.serializeBinaryToWriter
    );
  }
  f = message.getCapacityweekly();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.v1.StatCapacityWeeklyE.serializeBinaryToWriter
    );
  }
  f = message.getLessoncount();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.v1.StatUserLessonCountE.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 no = 1;
 * @return {number}
 */
proto.v1.StatUserSummaryE.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.StatUserSummaryE.prototype.setNo = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 userNo = 2;
 * @return {number}
 */
proto.v1.StatUserSummaryE.prototype.getUserno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.StatUserSummaryE.prototype.setUserno = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.v1.StatUserSummaryE.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.StatUserSummaryE.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string provider = 4;
 * @return {string}
 */
proto.v1.StatUserSummaryE.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.StatUserSummaryE.prototype.setProvider = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 cRetry = 5;
 * @return {number}
 */
proto.v1.StatUserSummaryE.prototype.getCretry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.StatUserSummaryE.prototype.setCretry = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 cSuccess = 6;
 * @return {number}
 */
proto.v1.StatUserSummaryE.prototype.getCsuccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.v1.StatUserSummaryE.prototype.setCsuccess = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string sTime = 7;
 * @return {string}
 */
proto.v1.StatUserSummaryE.prototype.getStime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.v1.StatUserSummaryE.prototype.setStime = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string eTime = 8;
 * @return {string}
 */
proto.v1.StatUserSummaryE.prototype.getEtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.v1.StatUserSummaryE.prototype.setEtime = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional StatStudyTimeE studyTime = 9;
 * @return {?proto.v1.StatStudyTimeE}
 */
proto.v1.StatUserSummaryE.prototype.getStudytime = function() {
  return /** @type{?proto.v1.StatStudyTimeE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatStudyTimeE, 9));
};


/** @param {?proto.v1.StatStudyTimeE|undefined} value */
proto.v1.StatUserSummaryE.prototype.setStudytime = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserSummaryE.prototype.clearStudytime = function() {
  this.setStudytime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserSummaryE.prototype.hasStudytime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional StatRateE rate = 10;
 * @return {?proto.v1.StatRateE}
 */
proto.v1.StatUserSummaryE.prototype.getRate = function() {
  return /** @type{?proto.v1.StatRateE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatRateE, 10));
};


/** @param {?proto.v1.StatRateE|undefined} value */
proto.v1.StatUserSummaryE.prototype.setRate = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserSummaryE.prototype.clearRate = function() {
  this.setRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserSummaryE.prototype.hasRate = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional StatCapacityMeanE capacityMean = 11;
 * @return {?proto.v1.StatCapacityMeanE}
 */
proto.v1.StatUserSummaryE.prototype.getCapacitymean = function() {
  return /** @type{?proto.v1.StatCapacityMeanE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityMeanE, 11));
};


/** @param {?proto.v1.StatCapacityMeanE|undefined} value */
proto.v1.StatUserSummaryE.prototype.setCapacitymean = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserSummaryE.prototype.clearCapacitymean = function() {
  this.setCapacitymean(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserSummaryE.prototype.hasCapacitymean = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional StatCapacityWeeklyE capacityWeekly = 12;
 * @return {?proto.v1.StatCapacityWeeklyE}
 */
proto.v1.StatUserSummaryE.prototype.getCapacityweekly = function() {
  return /** @type{?proto.v1.StatCapacityWeeklyE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityWeeklyE, 12));
};


/** @param {?proto.v1.StatCapacityWeeklyE|undefined} value */
proto.v1.StatUserSummaryE.prototype.setCapacityweekly = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserSummaryE.prototype.clearCapacityweekly = function() {
  this.setCapacityweekly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserSummaryE.prototype.hasCapacityweekly = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StatUserLessonCountE lessonCount = 13;
 * @return {?proto.v1.StatUserLessonCountE}
 */
proto.v1.StatUserSummaryE.prototype.getLessoncount = function() {
  return /** @type{?proto.v1.StatUserLessonCountE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatUserLessonCountE, 13));
};


/** @param {?proto.v1.StatUserLessonCountE|undefined} value */
proto.v1.StatUserSummaryE.prototype.setLessoncount = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserSummaryE.prototype.clearLessoncount = function() {
  this.setLessoncount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserSummaryE.prototype.hasLessoncount = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatUserLessonCountE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatUserLessonCountE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatUserLessonCountE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserLessonCountE.toObject = function(includeInstance, msg) {
  var f, obj = {
    lessonregistercount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lessonownercount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lessonownerstudentcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lessonownerstudentmeancount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lessondonecount: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatUserLessonCountE}
 */
proto.v1.StatUserLessonCountE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatUserLessonCountE;
  return proto.v1.StatUserLessonCountE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatUserLessonCountE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatUserLessonCountE}
 */
proto.v1.StatUserLessonCountE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLessonregistercount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLessonownercount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLessonownerstudentcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLessonownerstudentmeancount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLessondonecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatUserLessonCountE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatUserLessonCountE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatUserLessonCountE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserLessonCountE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLessonregistercount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLessonownercount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLessonownerstudentcount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLessonownerstudentmeancount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLessondonecount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 lessonRegisterCount = 1;
 * @return {number}
 */
proto.v1.StatUserLessonCountE.prototype.getLessonregistercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.StatUserLessonCountE.prototype.setLessonregistercount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 lessonOwnerCount = 2;
 * @return {number}
 */
proto.v1.StatUserLessonCountE.prototype.getLessonownercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.StatUserLessonCountE.prototype.setLessonownercount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 lessonOwnerStudentCount = 3;
 * @return {number}
 */
proto.v1.StatUserLessonCountE.prototype.getLessonownerstudentcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.StatUserLessonCountE.prototype.setLessonownerstudentcount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 lessonOwnerStudentMeanCount = 4;
 * @return {number}
 */
proto.v1.StatUserLessonCountE.prototype.getLessonownerstudentmeancount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.StatUserLessonCountE.prototype.setLessonownerstudentmeancount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 lessonDoneCount = 5;
 * @return {number}
 */
proto.v1.StatUserLessonCountE.prototype.getLessondonecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.StatUserLessonCountE.prototype.setLessondonecount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatRateE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatRateE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatRateE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatRateE.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accuracy: jspb.Message.getFieldWithDefault(msg, 2, 0),
    progress: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatRateE}
 */
proto.v1.StatRateE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatRateE;
  return proto.v1.StatRateE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatRateE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatRateE}
 */
proto.v1.StatRateE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccuracy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatRateE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatRateE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatRateE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatRateE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAccuracy();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 success = 1;
 * @return {number}
 */
proto.v1.StatRateE.prototype.getSuccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.StatRateE.prototype.setSuccess = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 accuracy = 2;
 * @return {number}
 */
proto.v1.StatRateE.prototype.getAccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.StatRateE.prototype.setAccuracy = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 progress = 3;
 * @return {number}
 */
proto.v1.StatRateE.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.StatRateE.prototype.setProgress = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatStudyTimeE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatStudyTimeE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatStudyTimeE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatStudyTimeE.toObject = function(includeInstance, msg) {
  var f, obj = {
    coding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    game: jspb.Message.getFieldWithDefault(msg, 2, ""),
    english: jspb.Message.getFieldWithDefault(msg, 3, ""),
    normal: jspb.Message.getFieldWithDefault(msg, 4, ""),
    days: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatStudyTimeE}
 */
proto.v1.StatStudyTimeE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatStudyTimeE;
  return proto.v1.StatStudyTimeE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatStudyTimeE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatStudyTimeE}
 */
proto.v1.StatStudyTimeE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoding(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGame(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnglish(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatStudyTimeE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatStudyTimeE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatStudyTimeE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatStudyTimeE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGame();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnglish();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNormal();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDays();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string coding = 1;
 * @return {string}
 */
proto.v1.StatStudyTimeE.prototype.getCoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.StatStudyTimeE.prototype.setCoding = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string game = 2;
 * @return {string}
 */
proto.v1.StatStudyTimeE.prototype.getGame = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.StatStudyTimeE.prototype.setGame = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string english = 3;
 * @return {string}
 */
proto.v1.StatStudyTimeE.prototype.getEnglish = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.StatStudyTimeE.prototype.setEnglish = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string normal = 4;
 * @return {string}
 */
proto.v1.StatStudyTimeE.prototype.getNormal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.StatStudyTimeE.prototype.setNormal = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string days = 5;
 * @return {string}
 */
proto.v1.StatStudyTimeE.prototype.getDays = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.v1.StatStudyTimeE.prototype.setDays = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatCapacityMeanE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatCapacityMeanE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatCapacityMeanE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityMeanE.toObject = function(includeInstance, msg) {
  var f, obj = {
    memory: (f = msg.getMemory()) && proto.v1.StatCapacityInfoE.toObject(includeInstance, f),
    concentration: (f = msg.getConcentration()) && proto.v1.StatCapacityInfoE.toObject(includeInstance, f),
    changingsituation: (f = msg.getChangingsituation()) && proto.v1.StatCapacityInfoE.toObject(includeInstance, f),
    thinkingskill: (f = msg.getThinkingskill()) && proto.v1.StatCapacityInfoE.toObject(includeInstance, f),
    language: (f = msg.getLanguage()) && proto.v1.StatCapacityInfoE.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatCapacityMeanE}
 */
proto.v1.StatCapacityMeanE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatCapacityMeanE;
  return proto.v1.StatCapacityMeanE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatCapacityMeanE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatCapacityMeanE}
 */
proto.v1.StatCapacityMeanE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.StatCapacityInfoE;
      reader.readMessage(value,proto.v1.StatCapacityInfoE.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    case 2:
      var value = new proto.v1.StatCapacityInfoE;
      reader.readMessage(value,proto.v1.StatCapacityInfoE.deserializeBinaryFromReader);
      msg.setConcentration(value);
      break;
    case 3:
      var value = new proto.v1.StatCapacityInfoE;
      reader.readMessage(value,proto.v1.StatCapacityInfoE.deserializeBinaryFromReader);
      msg.setChangingsituation(value);
      break;
    case 4:
      var value = new proto.v1.StatCapacityInfoE;
      reader.readMessage(value,proto.v1.StatCapacityInfoE.deserializeBinaryFromReader);
      msg.setThinkingskill(value);
      break;
    case 5:
      var value = new proto.v1.StatCapacityInfoE;
      reader.readMessage(value,proto.v1.StatCapacityInfoE.deserializeBinaryFromReader);
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatCapacityMeanE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatCapacityMeanE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatCapacityMeanE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityMeanE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.StatCapacityInfoE.serializeBinaryToWriter
    );
  }
  f = message.getConcentration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.StatCapacityInfoE.serializeBinaryToWriter
    );
  }
  f = message.getChangingsituation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.StatCapacityInfoE.serializeBinaryToWriter
    );
  }
  f = message.getThinkingskill();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.StatCapacityInfoE.serializeBinaryToWriter
    );
  }
  f = message.getLanguage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.StatCapacityInfoE.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatCapacityInfoE memory = 1;
 * @return {?proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityMeanE.prototype.getMemory = function() {
  return /** @type{?proto.v1.StatCapacityInfoE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityInfoE, 1));
};


/** @param {?proto.v1.StatCapacityInfoE|undefined} value */
proto.v1.StatCapacityMeanE.prototype.setMemory = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatCapacityMeanE.prototype.clearMemory = function() {
  this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatCapacityMeanE.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StatCapacityInfoE concentration = 2;
 * @return {?proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityMeanE.prototype.getConcentration = function() {
  return /** @type{?proto.v1.StatCapacityInfoE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityInfoE, 2));
};


/** @param {?proto.v1.StatCapacityInfoE|undefined} value */
proto.v1.StatCapacityMeanE.prototype.setConcentration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatCapacityMeanE.prototype.clearConcentration = function() {
  this.setConcentration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatCapacityMeanE.prototype.hasConcentration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StatCapacityInfoE changingSituation = 3;
 * @return {?proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityMeanE.prototype.getChangingsituation = function() {
  return /** @type{?proto.v1.StatCapacityInfoE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityInfoE, 3));
};


/** @param {?proto.v1.StatCapacityInfoE|undefined} value */
proto.v1.StatCapacityMeanE.prototype.setChangingsituation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatCapacityMeanE.prototype.clearChangingsituation = function() {
  this.setChangingsituation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatCapacityMeanE.prototype.hasChangingsituation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StatCapacityInfoE thinkingSkill = 4;
 * @return {?proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityMeanE.prototype.getThinkingskill = function() {
  return /** @type{?proto.v1.StatCapacityInfoE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityInfoE, 4));
};


/** @param {?proto.v1.StatCapacityInfoE|undefined} value */
proto.v1.StatCapacityMeanE.prototype.setThinkingskill = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatCapacityMeanE.prototype.clearThinkingskill = function() {
  this.setThinkingskill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatCapacityMeanE.prototype.hasThinkingskill = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StatCapacityInfoE language = 5;
 * @return {?proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityMeanE.prototype.getLanguage = function() {
  return /** @type{?proto.v1.StatCapacityInfoE} */ (
    jspb.Message.getWrapperField(this, proto.v1.StatCapacityInfoE, 5));
};


/** @param {?proto.v1.StatCapacityInfoE|undefined} value */
proto.v1.StatCapacityMeanE.prototype.setLanguage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatCapacityMeanE.prototype.clearLanguage = function() {
  this.setLanguage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatCapacityMeanE.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.StatCapacityWeeklyE.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatCapacityWeeklyE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatCapacityWeeklyE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatCapacityWeeklyE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityWeeklyE.toObject = function(includeInstance, msg) {
  var f, obj = {
    memoriesList: jspb.Message.toObjectList(msg.getMemoriesList(),
    proto.v1.StatCapacityE.toObject, includeInstance),
    concentrationsList: jspb.Message.toObjectList(msg.getConcentrationsList(),
    proto.v1.StatCapacityE.toObject, includeInstance),
    changingsituationsList: jspb.Message.toObjectList(msg.getChangingsituationsList(),
    proto.v1.StatCapacityE.toObject, includeInstance),
    thinkingskillsList: jspb.Message.toObjectList(msg.getThinkingskillsList(),
    proto.v1.StatCapacityE.toObject, includeInstance),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.v1.StatCapacityE.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatCapacityWeeklyE}
 */
proto.v1.StatCapacityWeeklyE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatCapacityWeeklyE;
  return proto.v1.StatCapacityWeeklyE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatCapacityWeeklyE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatCapacityWeeklyE}
 */
proto.v1.StatCapacityWeeklyE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.StatCapacityE;
      reader.readMessage(value,proto.v1.StatCapacityE.deserializeBinaryFromReader);
      msg.addMemories(value);
      break;
    case 2:
      var value = new proto.v1.StatCapacityE;
      reader.readMessage(value,proto.v1.StatCapacityE.deserializeBinaryFromReader);
      msg.addConcentrations(value);
      break;
    case 3:
      var value = new proto.v1.StatCapacityE;
      reader.readMessage(value,proto.v1.StatCapacityE.deserializeBinaryFromReader);
      msg.addChangingsituations(value);
      break;
    case 4:
      var value = new proto.v1.StatCapacityE;
      reader.readMessage(value,proto.v1.StatCapacityE.deserializeBinaryFromReader);
      msg.addThinkingskills(value);
      break;
    case 5:
      var value = new proto.v1.StatCapacityE;
      reader.readMessage(value,proto.v1.StatCapacityE.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatCapacityWeeklyE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatCapacityWeeklyE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatCapacityWeeklyE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityWeeklyE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.v1.StatCapacityE.serializeBinaryToWriter
    );
  }
  f = message.getConcentrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.StatCapacityE.serializeBinaryToWriter
    );
  }
  f = message.getChangingsituationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.v1.StatCapacityE.serializeBinaryToWriter
    );
  }
  f = message.getThinkingskillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.v1.StatCapacityE.serializeBinaryToWriter
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.StatCapacityE.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StatCapacityE memories = 1;
 * @return {!Array<!proto.v1.StatCapacityE>}
 */
proto.v1.StatCapacityWeeklyE.prototype.getMemoriesList = function() {
  return /** @type{!Array<!proto.v1.StatCapacityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatCapacityE, 1));
};


/** @param {!Array<!proto.v1.StatCapacityE>} value */
proto.v1.StatCapacityWeeklyE.prototype.setMemoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.StatCapacityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityWeeklyE.prototype.addMemories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.StatCapacityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatCapacityWeeklyE.prototype.clearMemoriesList = function() {
  this.setMemoriesList([]);
};


/**
 * repeated StatCapacityE concentrations = 2;
 * @return {!Array<!proto.v1.StatCapacityE>}
 */
proto.v1.StatCapacityWeeklyE.prototype.getConcentrationsList = function() {
  return /** @type{!Array<!proto.v1.StatCapacityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatCapacityE, 2));
};


/** @param {!Array<!proto.v1.StatCapacityE>} value */
proto.v1.StatCapacityWeeklyE.prototype.setConcentrationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.StatCapacityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityWeeklyE.prototype.addConcentrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.StatCapacityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatCapacityWeeklyE.prototype.clearConcentrationsList = function() {
  this.setConcentrationsList([]);
};


/**
 * repeated StatCapacityE changingSituations = 3;
 * @return {!Array<!proto.v1.StatCapacityE>}
 */
proto.v1.StatCapacityWeeklyE.prototype.getChangingsituationsList = function() {
  return /** @type{!Array<!proto.v1.StatCapacityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatCapacityE, 3));
};


/** @param {!Array<!proto.v1.StatCapacityE>} value */
proto.v1.StatCapacityWeeklyE.prototype.setChangingsituationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.v1.StatCapacityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityWeeklyE.prototype.addChangingsituations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.v1.StatCapacityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatCapacityWeeklyE.prototype.clearChangingsituationsList = function() {
  this.setChangingsituationsList([]);
};


/**
 * repeated StatCapacityE thinkingSkills = 4;
 * @return {!Array<!proto.v1.StatCapacityE>}
 */
proto.v1.StatCapacityWeeklyE.prototype.getThinkingskillsList = function() {
  return /** @type{!Array<!proto.v1.StatCapacityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatCapacityE, 4));
};


/** @param {!Array<!proto.v1.StatCapacityE>} value */
proto.v1.StatCapacityWeeklyE.prototype.setThinkingskillsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.v1.StatCapacityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityWeeklyE.prototype.addThinkingskills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.v1.StatCapacityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatCapacityWeeklyE.prototype.clearThinkingskillsList = function() {
  this.setThinkingskillsList([]);
};


/**
 * repeated StatCapacityE languages = 5;
 * @return {!Array<!proto.v1.StatCapacityE>}
 */
proto.v1.StatCapacityWeeklyE.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.v1.StatCapacityE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.StatCapacityE, 5));
};


/** @param {!Array<!proto.v1.StatCapacityE>} value */
proto.v1.StatCapacityWeeklyE.prototype.setLanguagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.StatCapacityE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityWeeklyE.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.StatCapacityE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.StatCapacityWeeklyE.prototype.clearLanguagesList = function() {
  this.setLanguagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatCapacityInfoE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatCapacityInfoE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatCapacityInfoE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityInfoE.toObject = function(includeInstance, msg) {
  var f, obj = {
    mean: jspb.Message.getFieldWithDefault(msg, 1, 0),
    describe: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityInfoE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatCapacityInfoE;
  return proto.v1.StatCapacityInfoE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatCapacityInfoE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatCapacityInfoE}
 */
proto.v1.StatCapacityInfoE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMean(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescribe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatCapacityInfoE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatCapacityInfoE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatCapacityInfoE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityInfoE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMean();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDescribe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 mean = 1;
 * @return {number}
 */
proto.v1.StatCapacityInfoE.prototype.getMean = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.StatCapacityInfoE.prototype.setMean = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string describe = 2;
 * @return {string}
 */
proto.v1.StatCapacityInfoE.prototype.getDescribe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.StatCapacityInfoE.prototype.setDescribe = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatCapacityE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatCapacityE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatCapacityE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityE.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    date: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatCapacityE;
  return proto.v1.StatCapacityE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatCapacityE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatCapacityE}
 */
proto.v1.StatCapacityE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatCapacityE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatCapacityE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatCapacityE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatCapacityE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.v1.StatCapacityE.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.StatCapacityE.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto.v1.StatCapacityE.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.StatCapacityE.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatUserViewE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatUserViewE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatUserViewE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserViewE.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lessonno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    curriculumno: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cview: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cbookmark: jspb.Message.getFieldWithDefault(msg, 5, 0),
    clike: jspb.Message.getFieldWithDefault(msg, 6, 0),
    clessonmember: jspb.Message.getFieldWithDefault(msg, 7, 0),
    creview: jspb.Message.getFieldWithDefault(msg, 8, 0),
    progress: (f = msg.getProgress()) && v1_base_pb.LessonProgressE.toObject(includeInstance, f),
    islike: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isview: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    isbookmark: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatUserViewE}
 */
proto.v1.StatUserViewE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatUserViewE;
  return proto.v1.StatUserViewE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatUserViewE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatUserViewE}
 */
proto.v1.StatUserViewE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLessonno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurriculumno(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCview(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCbookmark(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClike(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClessonmember(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreview(value);
      break;
    case 9:
      var value = new v1_base_pb.LessonProgressE;
      reader.readMessage(value,v1_base_pb.LessonProgressE.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslike(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsview(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbookmark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatUserViewE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatUserViewE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatUserViewE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatUserViewE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLessonno();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCurriculumno();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCview();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCbookmark();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getClike();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getClessonmember();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCreview();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      v1_base_pb.LessonProgressE.serializeBinaryToWriter
    );
  }
  f = message.getIslike();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsview();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIsbookmark();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.v1.StatUserViewE.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.StatUserViewE.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 lessonNo = 2;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getLessonno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setLessonno = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 curriculumNo = 3;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getCurriculumno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setCurriculumno = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cView = 4;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getCview = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setCview = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 cBookmark = 5;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getCbookmark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setCbookmark = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 cLike = 6;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getClike = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setClike = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 cLessonMember = 7;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getClessonmember = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setClessonmember = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 cReview = 8;
 * @return {number}
 */
proto.v1.StatUserViewE.prototype.getCreview = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.v1.StatUserViewE.prototype.setCreview = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional LessonProgressE progress = 9;
 * @return {?proto.v1.LessonProgressE}
 */
proto.v1.StatUserViewE.prototype.getProgress = function() {
  return /** @type{?proto.v1.LessonProgressE} */ (
    jspb.Message.getWrapperField(this, v1_base_pb.LessonProgressE, 9));
};


/** @param {?proto.v1.LessonProgressE|undefined} value */
proto.v1.StatUserViewE.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.StatUserViewE.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.StatUserViewE.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool isLike = 10;
 * @return {boolean}
 */
proto.v1.StatUserViewE.prototype.getIslike = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.v1.StatUserViewE.prototype.setIslike = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isView = 11;
 * @return {boolean}
 */
proto.v1.StatUserViewE.prototype.getIsview = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.v1.StatUserViewE.prototype.setIsview = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool isBookmark = 12;
 * @return {boolean}
 */
proto.v1.StatUserViewE.prototype.getIsbookmark = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.v1.StatUserViewE.prototype.setIsbookmark = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.StatLessonContentE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.StatLessonContentE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.StatLessonContentE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonContentE.toObject = function(includeInstance, msg) {
  var f, obj = {
    lessonid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lessoncontentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isdone: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    donedate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    idx: jspb.Message.getFieldWithDefault(msg, 5, 0),
    userhashkey: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.StatLessonContentE}
 */
proto.v1.StatLessonContentE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.StatLessonContentE;
  return proto.v1.StatLessonContentE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.StatLessonContentE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.StatLessonContentE}
 */
proto.v1.StatLessonContentE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessonid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessoncontentid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDonedate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdx(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserhashkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.StatLessonContentE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.StatLessonContentE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.StatLessonContentE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.StatLessonContentE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLessonid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLessoncontentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsdone();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDonedate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUserhashkey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string lessonId = 1;
 * @return {string}
 */
proto.v1.StatLessonContentE.prototype.getLessonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.StatLessonContentE.prototype.setLessonid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lessonContentId = 2;
 * @return {string}
 */
proto.v1.StatLessonContentE.prototype.getLessoncontentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.StatLessonContentE.prototype.setLessoncontentid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isDone = 3;
 * @return {boolean}
 */
proto.v1.StatLessonContentE.prototype.getIsdone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.v1.StatLessonContentE.prototype.setIsdone = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string doneDate = 4;
 * @return {string}
 */
proto.v1.StatLessonContentE.prototype.getDonedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.StatLessonContentE.prototype.setDonedate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 idx = 5;
 * @return {number}
 */
proto.v1.StatLessonContentE.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.StatLessonContentE.prototype.setIdx = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string userHashKey = 6;
 * @return {string}
 */
proto.v1.StatLessonContentE.prototype.getUserhashkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.v1.StatLessonContentE.prototype.setUserhashkey = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.v1);
