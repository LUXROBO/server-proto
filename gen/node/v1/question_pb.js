/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.QuestionE', null, global);
goog.exportSymbol('proto.v1.QuestionInfoE', null, global);
goog.exportSymbol('proto.v1.QuestionLevelTypeE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamValueBooleanE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamValueE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamValueIntArrayE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamValueIntE', null, global);
goog.exportSymbol('proto.v1.QuestionTestcaseParamValueStringE', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.QuestionE.repeatedFields_, null);
};
goog.inherits(proto.v1.QuestionE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionE.displayName = 'proto.v1.QuestionE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionInfoE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionInfoE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionInfoE.displayName = 'proto.v1.QuestionInfoE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.QuestionTestcaseE.repeatedFields_, null);
};
goog.inherits(proto.v1.QuestionTestcaseE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseE.displayName = 'proto.v1.QuestionTestcaseE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamE.displayName = 'proto.v1.QuestionTestcaseParamE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamValueE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamValueE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamValueE.displayName = 'proto.v1.QuestionTestcaseParamValueE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamValueIntE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamValueIntE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamValueIntE.displayName = 'proto.v1.QuestionTestcaseParamValueIntE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamValueIntArrayE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.QuestionTestcaseParamValueIntArrayE.repeatedFields_, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamValueIntArrayE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamValueIntArrayE.displayName = 'proto.v1.QuestionTestcaseParamValueIntArrayE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamValueStringE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamValueStringE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamValueStringE.displayName = 'proto.v1.QuestionTestcaseParamValueStringE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionTestcaseParamValueBooleanE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.QuestionTestcaseParamValueBooleanE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionTestcaseParamValueBooleanE.displayName = 'proto.v1.QuestionTestcaseParamValueBooleanE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.QuestionLevelTypeE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.QuestionLevelTypeE.repeatedFields_, null);
};
goog.inherits(proto.v1.QuestionLevelTypeE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.QuestionLevelTypeE.displayName = 'proto.v1.QuestionLevelTypeE';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.QuestionE.repeatedFields_ = [3,4,5,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionE.toObject = function(includeInstance, msg) {
  var f, obj = {
    no: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    infosList: jspb.Message.toObjectList(msg.getInfosList(),
    proto.v1.QuestionInfoE.toObject, includeInstance),
    exampletestcasesList: jspb.Message.toObjectList(msg.getExampletestcasesList(),
    proto.v1.QuestionTestcaseE.toObject, includeInstance),
    testcasesList: jspb.Message.toObjectList(msg.getTestcasesList(),
    proto.v1.QuestionTestcaseE.toObject, includeInstance),
    initcode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    answercode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    opentype: jspb.Message.getFieldWithDefault(msg, 9, ""),
    type: jspb.Message.getFieldWithDefault(msg, 10, ""),
    leveltype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    limittime: jspb.Message.getFieldWithDefault(msg, 12, ""),
    ownerno: jspb.Message.getFieldWithDefault(msg, 13, 0),
    createdat: jspb.Message.getFieldWithDefault(msg, 14, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 15, 0),
    deletedat: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionE}
 */
proto.v1.QuestionE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionE;
  return proto.v1.QuestionE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionE}
 */
proto.v1.QuestionE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = new proto.v1.QuestionInfoE;
      reader.readMessage(value,proto.v1.QuestionInfoE.deserializeBinaryFromReader);
      msg.addInfos(value);
      break;
    case 4:
      var value = new proto.v1.QuestionTestcaseE;
      reader.readMessage(value,proto.v1.QuestionTestcaseE.deserializeBinaryFromReader);
      msg.addExampletestcases(value);
      break;
    case 5:
      var value = new proto.v1.QuestionTestcaseE;
      reader.readMessage(value,proto.v1.QuestionTestcaseE.deserializeBinaryFromReader);
      msg.addTestcases(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitcode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswercode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpentype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeveltype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimittime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwnerno(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedat(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeletedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNo();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.v1.QuestionInfoE.serializeBinaryToWriter
    );
  }
  f = message.getExampletestcasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.v1.QuestionTestcaseE.serializeBinaryToWriter
    );
  }
  f = message.getTestcasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.QuestionTestcaseE.serializeBinaryToWriter
    );
  }
  f = message.getInitcode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAnswercode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getOpentype();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLeveltype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLimittime();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getOwnerno();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getDeletedat();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
};


/**
 * optional int64 no = 1;
 * @return {number}
 */
proto.v1.QuestionE.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.QuestionE.prototype.setNo = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated QuestionInfoE infos = 3;
 * @return {!Array<!proto.v1.QuestionInfoE>}
 */
proto.v1.QuestionE.prototype.getInfosList = function() {
  return /** @type{!Array<!proto.v1.QuestionInfoE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.QuestionInfoE, 3));
};


/** @param {!Array<!proto.v1.QuestionInfoE>} value */
proto.v1.QuestionE.prototype.setInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.v1.QuestionInfoE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.QuestionInfoE}
 */
proto.v1.QuestionE.prototype.addInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.v1.QuestionInfoE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionE.prototype.clearInfosList = function() {
  this.setInfosList([]);
};


/**
 * repeated QuestionTestcaseE exampleTestcases = 4;
 * @return {!Array<!proto.v1.QuestionTestcaseE>}
 */
proto.v1.QuestionE.prototype.getExampletestcasesList = function() {
  return /** @type{!Array<!proto.v1.QuestionTestcaseE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.QuestionTestcaseE, 4));
};


/** @param {!Array<!proto.v1.QuestionTestcaseE>} value */
proto.v1.QuestionE.prototype.setExampletestcasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.v1.QuestionTestcaseE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.QuestionTestcaseE}
 */
proto.v1.QuestionE.prototype.addExampletestcases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.v1.QuestionTestcaseE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionE.prototype.clearExampletestcasesList = function() {
  this.setExampletestcasesList([]);
};


/**
 * repeated QuestionTestcaseE testcases = 5;
 * @return {!Array<!proto.v1.QuestionTestcaseE>}
 */
proto.v1.QuestionE.prototype.getTestcasesList = function() {
  return /** @type{!Array<!proto.v1.QuestionTestcaseE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.QuestionTestcaseE, 5));
};


/** @param {!Array<!proto.v1.QuestionTestcaseE>} value */
proto.v1.QuestionE.prototype.setTestcasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.QuestionTestcaseE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.QuestionTestcaseE}
 */
proto.v1.QuestionE.prototype.addTestcases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.QuestionTestcaseE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionE.prototype.clearTestcasesList = function() {
  this.setTestcasesList([]);
};


/**
 * optional string initCode = 6;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getInitcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setInitcode = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string answerCode = 7;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getAnswercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setAnswercode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string tags = 8;
 * @return {!Array<string>}
 */
proto.v1.QuestionE.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.v1.QuestionE.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.v1.QuestionE.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionE.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string openType = 9;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getOpentype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setOpentype = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string type = 10;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string levelType = 11;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getLeveltype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setLeveltype = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string limitTime = 12;
 * @return {string}
 */
proto.v1.QuestionE.prototype.getLimittime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.v1.QuestionE.prototype.setLimittime = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int64 ownerNo = 13;
 * @return {number}
 */
proto.v1.QuestionE.prototype.getOwnerno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.v1.QuestionE.prototype.setOwnerno = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 createdAt = 14;
 * @return {number}
 */
proto.v1.QuestionE.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.v1.QuestionE.prototype.setCreatedat = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 updatedAt = 15;
 * @return {number}
 */
proto.v1.QuestionE.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.v1.QuestionE.prototype.setUpdatedat = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 deletedAt = 16;
 * @return {number}
 */
proto.v1.QuestionE.prototype.getDeletedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.v1.QuestionE.prototype.setDeletedat = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionInfoE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionInfoE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionInfoE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionInfoE.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionInfoE}
 */
proto.v1.QuestionInfoE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionInfoE;
  return proto.v1.QuestionInfoE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionInfoE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionInfoE}
 */
proto.v1.QuestionInfoE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionInfoE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionInfoE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionInfoE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionInfoE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.v1.QuestionInfoE.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.QuestionInfoE.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.v1.QuestionInfoE.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.QuestionInfoE.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.QuestionTestcaseE.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseE.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputList: jspb.Message.toObjectList(msg.getInputList(),
    proto.v1.QuestionTestcaseParamE.toObject, includeInstance),
    output: (f = msg.getOutput()) && proto.v1.QuestionTestcaseParamE.toObject(includeInstance, f),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseE}
 */
proto.v1.QuestionTestcaseE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseE;
  return proto.v1.QuestionTestcaseE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseE}
 */
proto.v1.QuestionTestcaseE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.QuestionTestcaseParamE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamE.deserializeBinaryFromReader);
      msg.addInput(value);
      break;
    case 2:
      var value = new proto.v1.QuestionTestcaseParamE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamE.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.v1.QuestionTestcaseParamE.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.QuestionTestcaseParamE.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated QuestionTestcaseParamE input = 1;
 * @return {!Array<!proto.v1.QuestionTestcaseParamE>}
 */
proto.v1.QuestionTestcaseE.prototype.getInputList = function() {
  return /** @type{!Array<!proto.v1.QuestionTestcaseParamE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.QuestionTestcaseParamE, 1));
};


/** @param {!Array<!proto.v1.QuestionTestcaseParamE>} value */
proto.v1.QuestionTestcaseE.prototype.setInputList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.QuestionTestcaseParamE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.QuestionTestcaseParamE}
 */
proto.v1.QuestionTestcaseE.prototype.addInput = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.QuestionTestcaseParamE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionTestcaseE.prototype.clearInputList = function() {
  this.setInputList([]);
};


/**
 * optional QuestionTestcaseParamE output = 2;
 * @return {?proto.v1.QuestionTestcaseParamE}
 */
proto.v1.QuestionTestcaseE.prototype.getOutput = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamE, 2));
};


/** @param {?proto.v1.QuestionTestcaseParamE|undefined} value */
proto.v1.QuestionTestcaseE.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseE.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseE.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 score = 3;
 * @return {number}
 */
proto.v1.QuestionTestcaseE.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.QuestionTestcaseE.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamE.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.v1.QuestionTestcaseParamValueE.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamE}
 */
proto.v1.QuestionTestcaseParamE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamE;
  return proto.v1.QuestionTestcaseParamE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamE}
 */
proto.v1.QuestionTestcaseParamE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.v1.QuestionTestcaseParamValueE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamValueE.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.QuestionTestcaseParamValueE.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.v1.QuestionTestcaseParamE.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.QuestionTestcaseParamE.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional QuestionTestcaseParamValueE value = 2;
 * @return {?proto.v1.QuestionTestcaseParamValueE}
 */
proto.v1.QuestionTestcaseParamE.prototype.getValue = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamValueE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamValueE, 2));
};


/** @param {?proto.v1.QuestionTestcaseParamValueE|undefined} value */
proto.v1.QuestionTestcaseParamE.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseParamE.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamE.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamValueE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamValueE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueE.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueint: (f = msg.getValueint()) && proto.v1.QuestionTestcaseParamValueIntE.toObject(includeInstance, f),
    valueintarray: (f = msg.getValueintarray()) && proto.v1.QuestionTestcaseParamValueIntArrayE.toObject(includeInstance, f),
    valuestring: (f = msg.getValuestring()) && proto.v1.QuestionTestcaseParamValueStringE.toObject(includeInstance, f),
    valueboolean: (f = msg.getValueboolean()) && proto.v1.QuestionTestcaseParamValueBooleanE.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamValueE}
 */
proto.v1.QuestionTestcaseParamValueE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamValueE;
  return proto.v1.QuestionTestcaseParamValueE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamValueE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamValueE}
 */
proto.v1.QuestionTestcaseParamValueE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.QuestionTestcaseParamValueIntE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamValueIntE.deserializeBinaryFromReader);
      msg.setValueint(value);
      break;
    case 2:
      var value = new proto.v1.QuestionTestcaseParamValueIntArrayE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamValueIntArrayE.deserializeBinaryFromReader);
      msg.setValueintarray(value);
      break;
    case 3:
      var value = new proto.v1.QuestionTestcaseParamValueStringE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamValueStringE.deserializeBinaryFromReader);
      msg.setValuestring(value);
      break;
    case 4:
      var value = new proto.v1.QuestionTestcaseParamValueBooleanE;
      reader.readMessage(value,proto.v1.QuestionTestcaseParamValueBooleanE.deserializeBinaryFromReader);
      msg.setValueboolean(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamValueE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamValueE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.QuestionTestcaseParamValueIntE.serializeBinaryToWriter
    );
  }
  f = message.getValueintarray();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.QuestionTestcaseParamValueIntArrayE.serializeBinaryToWriter
    );
  }
  f = message.getValuestring();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.QuestionTestcaseParamValueStringE.serializeBinaryToWriter
    );
  }
  f = message.getValueboolean();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.QuestionTestcaseParamValueBooleanE.serializeBinaryToWriter
    );
  }
};


/**
 * optional QuestionTestcaseParamValueIntE valueInt = 1;
 * @return {?proto.v1.QuestionTestcaseParamValueIntE}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.getValueint = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamValueIntE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamValueIntE, 1));
};


/** @param {?proto.v1.QuestionTestcaseParamValueIntE|undefined} value */
proto.v1.QuestionTestcaseParamValueE.prototype.setValueint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseParamValueE.prototype.clearValueint = function() {
  this.setValueint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.hasValueint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QuestionTestcaseParamValueIntArrayE valueIntArray = 2;
 * @return {?proto.v1.QuestionTestcaseParamValueIntArrayE}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.getValueintarray = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamValueIntArrayE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamValueIntArrayE, 2));
};


/** @param {?proto.v1.QuestionTestcaseParamValueIntArrayE|undefined} value */
proto.v1.QuestionTestcaseParamValueE.prototype.setValueintarray = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseParamValueE.prototype.clearValueintarray = function() {
  this.setValueintarray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.hasValueintarray = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QuestionTestcaseParamValueStringE valueString = 3;
 * @return {?proto.v1.QuestionTestcaseParamValueStringE}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.getValuestring = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamValueStringE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamValueStringE, 3));
};


/** @param {?proto.v1.QuestionTestcaseParamValueStringE|undefined} value */
proto.v1.QuestionTestcaseParamValueE.prototype.setValuestring = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseParamValueE.prototype.clearValuestring = function() {
  this.setValuestring(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.hasValuestring = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional QuestionTestcaseParamValueBooleanE valueBoolean = 4;
 * @return {?proto.v1.QuestionTestcaseParamValueBooleanE}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.getValueboolean = function() {
  return /** @type{?proto.v1.QuestionTestcaseParamValueBooleanE} */ (
    jspb.Message.getWrapperField(this, proto.v1.QuestionTestcaseParamValueBooleanE, 4));
};


/** @param {?proto.v1.QuestionTestcaseParamValueBooleanE|undefined} value */
proto.v1.QuestionTestcaseParamValueE.prototype.setValueboolean = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.v1.QuestionTestcaseParamValueE.prototype.clearValueboolean = function() {
  this.setValueboolean(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamValueE.prototype.hasValueboolean = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamValueIntE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamValueIntE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamValueIntE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueIntE.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamValueIntE}
 */
proto.v1.QuestionTestcaseParamValueIntE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamValueIntE;
  return proto.v1.QuestionTestcaseParamValueIntE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamValueIntE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamValueIntE}
 */
proto.v1.QuestionTestcaseParamValueIntE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamValueIntE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamValueIntE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamValueIntE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueIntE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.v1.QuestionTestcaseParamValueIntE.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.QuestionTestcaseParamValueIntE.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamValueIntArrayE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamValueIntArrayE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamValueIntArrayE}
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamValueIntArrayE;
  return proto.v1.QuestionTestcaseParamValueIntArrayE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamValueIntArrayE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamValueIntArrayE}
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamValueIntArrayE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamValueIntArrayE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 value = 1;
 * @return {!Array<number>}
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.getValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionTestcaseParamValueIntArrayE.prototype.clearValueList = function() {
  this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamValueStringE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamValueStringE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamValueStringE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueStringE.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamValueStringE}
 */
proto.v1.QuestionTestcaseParamValueStringE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamValueStringE;
  return proto.v1.QuestionTestcaseParamValueStringE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamValueStringE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamValueStringE}
 */
proto.v1.QuestionTestcaseParamValueStringE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamValueStringE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamValueStringE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamValueStringE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueStringE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.v1.QuestionTestcaseParamValueStringE.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.QuestionTestcaseParamValueStringE.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionTestcaseParamValueBooleanE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionTestcaseParamValueBooleanE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionTestcaseParamValueBooleanE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueBooleanE.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionTestcaseParamValueBooleanE}
 */
proto.v1.QuestionTestcaseParamValueBooleanE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionTestcaseParamValueBooleanE;
  return proto.v1.QuestionTestcaseParamValueBooleanE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionTestcaseParamValueBooleanE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionTestcaseParamValueBooleanE}
 */
proto.v1.QuestionTestcaseParamValueBooleanE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionTestcaseParamValueBooleanE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionTestcaseParamValueBooleanE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionTestcaseParamValueBooleanE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionTestcaseParamValueBooleanE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.v1.QuestionTestcaseParamValueBooleanE.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.v1.QuestionTestcaseParamValueBooleanE.prototype.setValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.QuestionLevelTypeE.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.QuestionLevelTypeE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.QuestionLevelTypeE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.QuestionLevelTypeE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionLevelTypeE.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.QuestionLevelTypeE}
 */
proto.v1.QuestionLevelTypeE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.QuestionLevelTypeE;
  return proto.v1.QuestionLevelTypeE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.QuestionLevelTypeE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.QuestionLevelTypeE}
 */
proto.v1.QuestionLevelTypeE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.QuestionLevelTypeE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.QuestionLevelTypeE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.QuestionLevelTypeE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.QuestionLevelTypeE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string types = 1;
 * @return {!Array<string>}
 */
proto.v1.QuestionLevelTypeE.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.v1.QuestionLevelTypeE.prototype.setTypesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.v1.QuestionLevelTypeE.prototype.addTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.QuestionLevelTypeE.prototype.clearTypesList = function() {
  this.setTypesList([]);
};


goog.object.extend(exports, proto.v1);
