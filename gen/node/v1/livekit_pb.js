/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var v1_enum_pb = require('../v1/enum_pb.js');
goog.object.extend(proto, v1_enum_pb);
goog.exportSymbol('proto.v1.LivekitCodecE', null, global);
goog.exportSymbol('proto.v1.LivekitParticipantE', null, global);
goog.exportSymbol('proto.v1.LivekitRoomE', null, global);
goog.exportSymbol('proto.v1.LivekitTrackE', null, global);
goog.exportSymbol('proto.v1.LivekitVideoLayerE', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LivekitRoomE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.LivekitRoomE.repeatedFields_, null);
};
goog.inherits(proto.v1.LivekitRoomE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.LivekitRoomE.displayName = 'proto.v1.LivekitRoomE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LivekitCodecE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LivekitCodecE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.LivekitCodecE.displayName = 'proto.v1.LivekitCodecE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LivekitParticipantE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.LivekitParticipantE.repeatedFields_, null);
};
goog.inherits(proto.v1.LivekitParticipantE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.LivekitParticipantE.displayName = 'proto.v1.LivekitParticipantE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LivekitTrackE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.LivekitTrackE.repeatedFields_, null);
};
goog.inherits(proto.v1.LivekitTrackE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.LivekitTrackE.displayName = 'proto.v1.LivekitTrackE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LivekitVideoLayerE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LivekitVideoLayerE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.LivekitVideoLayerE.displayName = 'proto.v1.LivekitVideoLayerE';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.LivekitRoomE.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LivekitRoomE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LivekitRoomE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LivekitRoomE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitRoomE.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    emptytimeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    creationtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxparticipants: jspb.Message.getFieldWithDefault(msg, 5, 0),
    turnpassword: jspb.Message.getFieldWithDefault(msg, 6, ""),
    enablecodecsList: jspb.Message.toObjectList(msg.getEnablecodecsList(),
    proto.v1.LivekitCodecE.toObject, includeInstance),
    metadata: jspb.Message.getFieldWithDefault(msg, 8, ""),
    numparticipants: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LivekitRoomE}
 */
proto.v1.LivekitRoomE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LivekitRoomE;
  return proto.v1.LivekitRoomE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LivekitRoomE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LivekitRoomE}
 */
proto.v1.LivekitRoomE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEmptytimeout(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreationtime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxparticipants(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTurnpassword(value);
      break;
    case 7:
      var value = new proto.v1.LivekitCodecE;
      reader.readMessage(value,proto.v1.LivekitCodecE.deserializeBinaryFromReader);
      msg.addEnablecodecs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumparticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LivekitRoomE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LivekitRoomE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LivekitRoomE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitRoomE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmptytimeout();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreationtime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMaxparticipants();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTurnpassword();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEnablecodecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.v1.LivekitCodecE.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNumparticipants();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.v1.LivekitRoomE.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.LivekitRoomE.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.v1.LivekitRoomE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.LivekitRoomE.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 emptyTimeout = 3;
 * @return {number}
 */
proto.v1.LivekitRoomE.prototype.getEmptytimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.LivekitRoomE.prototype.setEmptytimeout = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 creationTime = 4;
 * @return {number}
 */
proto.v1.LivekitRoomE.prototype.getCreationtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.LivekitRoomE.prototype.setCreationtime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 maxParticipants = 5;
 * @return {number}
 */
proto.v1.LivekitRoomE.prototype.getMaxparticipants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.LivekitRoomE.prototype.setMaxparticipants = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string turnPassword = 6;
 * @return {string}
 */
proto.v1.LivekitRoomE.prototype.getTurnpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.v1.LivekitRoomE.prototype.setTurnpassword = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated LivekitCodecE enableCodecs = 7;
 * @return {!Array<!proto.v1.LivekitCodecE>}
 */
proto.v1.LivekitRoomE.prototype.getEnablecodecsList = function() {
  return /** @type{!Array<!proto.v1.LivekitCodecE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.LivekitCodecE, 7));
};


/** @param {!Array<!proto.v1.LivekitCodecE>} value */
proto.v1.LivekitRoomE.prototype.setEnablecodecsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.v1.LivekitCodecE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.LivekitCodecE}
 */
proto.v1.LivekitRoomE.prototype.addEnablecodecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.v1.LivekitCodecE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.LivekitRoomE.prototype.clearEnablecodecsList = function() {
  this.setEnablecodecsList([]);
};


/**
 * optional string metadata = 8;
 * @return {string}
 */
proto.v1.LivekitRoomE.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.v1.LivekitRoomE.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 numParticipants = 9;
 * @return {number}
 */
proto.v1.LivekitRoomE.prototype.getNumparticipants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.v1.LivekitRoomE.prototype.setNumparticipants = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LivekitCodecE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LivekitCodecE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LivekitCodecE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitCodecE.toObject = function(includeInstance, msg) {
  var f, obj = {
    mime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fmtpline: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LivekitCodecE}
 */
proto.v1.LivekitCodecE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LivekitCodecE;
  return proto.v1.LivekitCodecE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LivekitCodecE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LivekitCodecE}
 */
proto.v1.LivekitCodecE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFmtpline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LivekitCodecE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LivekitCodecE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LivekitCodecE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitCodecE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFmtpline();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string mime = 1;
 * @return {string}
 */
proto.v1.LivekitCodecE.prototype.getMime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.LivekitCodecE.prototype.setMime = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fmtpLine = 2;
 * @return {string}
 */
proto.v1.LivekitCodecE.prototype.getFmtpline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.LivekitCodecE.prototype.setFmtpline = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.LivekitParticipantE.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LivekitParticipantE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LivekitParticipantE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LivekitParticipantE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitParticipantE.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.v1.LivekitTrackE.toObject, includeInstance),
    metadata: jspb.Message.getFieldWithDefault(msg, 6, ""),
    joinedat: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ispublisher: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LivekitParticipantE}
 */
proto.v1.LivekitParticipantE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LivekitParticipantE;
  return proto.v1.LivekitParticipantE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LivekitParticipantE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LivekitParticipantE}
 */
proto.v1.LivekitParticipantE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = new proto.v1.LivekitTrackE;
      reader.readMessage(value,proto.v1.LivekitTrackE.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJoinedat(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspublisher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LivekitParticipantE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LivekitParticipantE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LivekitParticipantE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitParticipantE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.LivekitTrackE.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getJoinedat();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getIspublisher();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.v1.LivekitParticipantE.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.LivekitParticipantE.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identity = 2;
 * @return {string}
 */
proto.v1.LivekitParticipantE.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.LivekitParticipantE.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.v1.LivekitParticipantE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.LivekitParticipantE.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.v1.LivekitParticipantE.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.LivekitParticipantE.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated LivekitTrackE tracks = 5;
 * @return {!Array<!proto.v1.LivekitTrackE>}
 */
proto.v1.LivekitParticipantE.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.v1.LivekitTrackE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.LivekitTrackE, 5));
};


/** @param {!Array<!proto.v1.LivekitTrackE>} value */
proto.v1.LivekitParticipantE.prototype.setTracksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.LivekitTrackE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.LivekitTrackE}
 */
proto.v1.LivekitParticipantE.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.LivekitTrackE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.LivekitParticipantE.prototype.clearTracksList = function() {
  this.setTracksList([]);
};


/**
 * optional string metadata = 6;
 * @return {string}
 */
proto.v1.LivekitParticipantE.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.v1.LivekitParticipantE.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 joinedAt = 7;
 * @return {number}
 */
proto.v1.LivekitParticipantE.prototype.getJoinedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.v1.LivekitParticipantE.prototype.setJoinedat = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool isPublisher = 8;
 * @return {boolean}
 */
proto.v1.LivekitParticipantE.prototype.getIspublisher = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.v1.LivekitParticipantE.prototype.setIspublisher = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.LivekitTrackE.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LivekitTrackE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LivekitTrackE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LivekitTrackE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitTrackE.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    muted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    height: jspb.Message.getFieldWithDefault(msg, 6, 0),
    simulcast: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    disabledtx: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    source: jspb.Message.getFieldWithDefault(msg, 9, 0),
    layersList: jspb.Message.toObjectList(msg.getLayersList(),
    proto.v1.LivekitVideoLayerE.toObject, includeInstance),
    mimetype: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LivekitTrackE}
 */
proto.v1.LivekitTrackE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LivekitTrackE;
  return proto.v1.LivekitTrackE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LivekitTrackE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LivekitTrackE}
 */
proto.v1.LivekitTrackE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSimulcast(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabledtx(value);
      break;
    case 9:
      var value = /** @type {!proto.v1.LivekitTrackSourceType} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 10:
      var value = new proto.v1.LivekitVideoLayerE;
      reader.readMessage(value,proto.v1.LivekitVideoLayerE.deserializeBinaryFromReader);
      msg.addLayers(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LivekitTrackE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LivekitTrackE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LivekitTrackE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitTrackE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSimulcast();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDisabledtx();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getLayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.v1.LivekitVideoLayerE.serializeBinaryToWriter
    );
  }
  f = message.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.v1.LivekitTrackE.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.LivekitTrackE.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.v1.LivekitTrackE.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.LivekitTrackE.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.v1.LivekitTrackE.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.LivekitTrackE.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool muted = 4;
 * @return {boolean}
 */
proto.v1.LivekitTrackE.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.v1.LivekitTrackE.prototype.setMuted = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int64 width = 5;
 * @return {number}
 */
proto.v1.LivekitTrackE.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.LivekitTrackE.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 height = 6;
 * @return {number}
 */
proto.v1.LivekitTrackE.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.v1.LivekitTrackE.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool simulcast = 7;
 * @return {boolean}
 */
proto.v1.LivekitTrackE.prototype.getSimulcast = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.v1.LivekitTrackE.prototype.setSimulcast = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool disableDtx = 8;
 * @return {boolean}
 */
proto.v1.LivekitTrackE.prototype.getDisabledtx = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.v1.LivekitTrackE.prototype.setDisabledtx = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional LivekitTrackSourceType source = 9;
 * @return {!proto.v1.LivekitTrackSourceType}
 */
proto.v1.LivekitTrackE.prototype.getSource = function() {
  return /** @type {!proto.v1.LivekitTrackSourceType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.v1.LivekitTrackSourceType} value */
proto.v1.LivekitTrackE.prototype.setSource = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * repeated LivekitVideoLayerE layers = 10;
 * @return {!Array<!proto.v1.LivekitVideoLayerE>}
 */
proto.v1.LivekitTrackE.prototype.getLayersList = function() {
  return /** @type{!Array<!proto.v1.LivekitVideoLayerE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.LivekitVideoLayerE, 10));
};


/** @param {!Array<!proto.v1.LivekitVideoLayerE>} value */
proto.v1.LivekitTrackE.prototype.setLayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.v1.LivekitVideoLayerE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.LivekitVideoLayerE}
 */
proto.v1.LivekitTrackE.prototype.addLayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.v1.LivekitVideoLayerE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.v1.LivekitTrackE.prototype.clearLayersList = function() {
  this.setLayersList([]);
};


/**
 * optional string mimeType = 11;
 * @return {string}
 */
proto.v1.LivekitTrackE.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.v1.LivekitTrackE.prototype.setMimetype = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LivekitVideoLayerE.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LivekitVideoLayerE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LivekitVideoLayerE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitVideoLayerE.toObject = function(includeInstance, msg) {
  var f, obj = {
    quality: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bitrate: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LivekitVideoLayerE}
 */
proto.v1.LivekitVideoLayerE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LivekitVideoLayerE;
  return proto.v1.LivekitVideoLayerE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LivekitVideoLayerE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LivekitVideoLayerE}
 */
proto.v1.LivekitVideoLayerE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v1.LivekitVideoQualityType} */ (reader.readEnum());
      msg.setQuality(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBitrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LivekitVideoLayerE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LivekitVideoLayerE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LivekitVideoLayerE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LivekitVideoLayerE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuality();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBitrate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional LivekitVideoQualityType quality = 1;
 * @return {!proto.v1.LivekitVideoQualityType}
 */
proto.v1.LivekitVideoLayerE.prototype.getQuality = function() {
  return /** @type {!proto.v1.LivekitVideoQualityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.v1.LivekitVideoQualityType} value */
proto.v1.LivekitVideoLayerE.prototype.setQuality = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 width = 2;
 * @return {number}
 */
proto.v1.LivekitVideoLayerE.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.LivekitVideoLayerE.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.v1.LivekitVideoLayerE.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.LivekitVideoLayerE.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 bitrate = 4;
 * @return {number}
 */
proto.v1.LivekitVideoLayerE.prototype.getBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.LivekitVideoLayerE.prototype.setBitrate = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.v1);
