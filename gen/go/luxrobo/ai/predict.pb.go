// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: ai/predict.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// user_number and question_number
type Numbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unum int32 `protobuf:"varint,1,opt,name=unum,proto3" json:"unum,omitempty"`
	Qnum int32 `protobuf:"varint,2,opt,name=qnum,proto3" json:"qnum,omitempty"`
}

func (x *Numbers) Reset() {
	*x = Numbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_predict_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Numbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Numbers) ProtoMessage() {}

func (x *Numbers) ProtoReflect() protoreflect.Message {
	mi := &file_ai_predict_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Numbers.ProtoReflect.Descriptor instead.
func (*Numbers) Descriptor() ([]byte, []int) {
	return file_ai_predict_proto_rawDescGZIP(), []int{0}
}

func (x *Numbers) GetUnum() int32 {
	if x != nil {
		return x.Unum
	}
	return 0
}

func (x *Numbers) GetQnum() int32 {
	if x != nil {
		return x.Qnum
	}
	return 0
}

// TC통과율, 소요시간, 종합점수
type Predictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passrate float32 `protobuf:"fixed32,1,opt,name=passrate,proto3" json:"passrate,omitempty"`
	Time     int32   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Score    float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Predictions) Reset() {
	*x = Predictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_predict_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predictions) ProtoMessage() {}

func (x *Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_ai_predict_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predictions.ProtoReflect.Descriptor instead.
func (*Predictions) Descriptor() ([]byte, []int) {
	return file_ai_predict_proto_rawDescGZIP(), []int{1}
}

func (x *Predictions) GetPassrate() float32 {
	if x != nil {
		return x.Passrate
	}
	return 0
}

func (x *Predictions) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Predictions) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_ai_predict_proto protoreflect.FileDescriptor

var file_ai_predict_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x61, 0x69, 0x22, 0x31, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x75, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x71, 0x6e, 0x75, 0x6d, 0x22, 0x53, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x39,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x0b, 0x2e, 0x61, 0x69, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x0f, 0x2e, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x42, 0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e, 0x61, 0x69, 0x42, 0x11, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x0a, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2f, 0x61, 0x69, 0xa2, 0x02, 0x03, 0x54,
	0x50, 0x58, 0xaa, 0x02, 0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e, 0x61, 0x69, 0xca,
	0x02, 0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x5c, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_predict_proto_rawDescOnce sync.Once
	file_ai_predict_proto_rawDescData = file_ai_predict_proto_rawDesc
)

func file_ai_predict_proto_rawDescGZIP() []byte {
	file_ai_predict_proto_rawDescOnce.Do(func() {
		file_ai_predict_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_predict_proto_rawDescData)
	})
	return file_ai_predict_proto_rawDescData
}

var file_ai_predict_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ai_predict_proto_goTypes = []interface{}{
	(*Numbers)(nil),     // 0: ai.Numbers
	(*Predictions)(nil), // 1: ai.Predictions
}
var file_ai_predict_proto_depIdxs = []int32{
	0, // 0: ai.Predictor.GetPredict:input_type -> ai.Numbers
	1, // 1: ai.Predictor.GetPredict:output_type -> ai.Predictions
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ai_predict_proto_init() }
func file_ai_predict_proto_init() {
	if File_ai_predict_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_predict_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Numbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_predict_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Predictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_predict_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ai_predict_proto_goTypes,
		DependencyIndexes: file_ai_predict_proto_depIdxs,
		MessageInfos:      file_ai_predict_proto_msgTypes,
	}.Build()
	File_ai_predict_proto = out.File
	file_ai_predict_proto_rawDesc = nil
	file_ai_predict_proto_goTypes = nil
	file_ai_predict_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PredictorClient is the client API for Predictor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PredictorClient interface {
	GetPredict(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Predictions, error)
}

type predictorClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictorClient(cc grpc.ClientConnInterface) PredictorClient {
	return &predictorClient{cc}
}

func (c *predictorClient) GetPredict(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Predictions, error) {
	out := new(Predictions)
	err := c.cc.Invoke(ctx, "/ai.Predictor/GetPredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictorServer is the server API for Predictor service.
type PredictorServer interface {
	GetPredict(context.Context, *Numbers) (*Predictions, error)
}

// UnimplementedPredictorServer can be embedded to have forward compatible implementations.
type UnimplementedPredictorServer struct {
}

func (*UnimplementedPredictorServer) GetPredict(context.Context, *Numbers) (*Predictions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredict not implemented")
}

func RegisterPredictorServer(s *grpc.Server, srv PredictorServer) {
	s.RegisterService(&_Predictor_serviceDesc, srv)
}

func _Predictor_GetPredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictorServer).GetPredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.Predictor/GetPredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictorServer).GetPredict(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predictor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.Predictor",
	HandlerType: (*PredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPredict",
			Handler:    _Predictor_GetPredict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai/predict.proto",
}
