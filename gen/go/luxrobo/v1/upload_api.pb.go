// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.8.0
// source: v1/upload_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UploadGraphqlQueryRequest graphql query
type UploadGraphqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	OperationName string `protobuf:"bytes,2,opt,name=operationName,proto3" json:"operationName,omitempty"`
}

func (x *UploadGraphqlQueryRequest) Reset() {
	*x = UploadGraphqlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGraphqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGraphqlQueryRequest) ProtoMessage() {}

func (x *UploadGraphqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGraphqlQueryRequest.ProtoReflect.Descriptor instead.
func (*UploadGraphqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{0}
}

func (x *UploadGraphqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UploadGraphqlQueryRequest) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

// UploadGraphqlQueryResponse graphql query response
type UploadGraphqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UploadGraphqlQueryResponse) Reset() {
	*x = UploadGraphqlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGraphqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGraphqlQueryResponse) ProtoMessage() {}

func (x *UploadGraphqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGraphqlQueryResponse.ProtoReflect.Descriptor instead.
func (*UploadGraphqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{1}
}

func (x *UploadGraphqlQueryResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadGraphqlQueryResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type UploadPdfToImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Base64      string `protobuf:"bytes,3,opt,name=base64,proto3" json:"base64,omitempty"`
}

func (x *UploadPdfToImagesRequest) Reset() {
	*x = UploadPdfToImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPdfToImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPdfToImagesRequest) ProtoMessage() {}

func (x *UploadPdfToImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPdfToImagesRequest.ProtoReflect.Descriptor instead.
func (*UploadPdfToImagesRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{2}
}

func (x *UploadPdfToImagesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadPdfToImagesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UploadPdfToImagesRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

type UploadPdfToImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    *Error        `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Images []*ImageInfoE `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *UploadPdfToImagesResponse) Reset() {
	*x = UploadPdfToImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPdfToImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPdfToImagesResponse) ProtoMessage() {}

func (x *UploadPdfToImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPdfToImagesResponse.ProtoReflect.Descriptor instead.
func (*UploadPdfToImagesResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{3}
}

func (x *UploadPdfToImagesResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadPdfToImagesResponse) GetImages() []*ImageInfoE {
	if x != nil {
		return x.Images
	}
	return nil
}

type UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceName string      `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ImageBase64 string      `protobuf:"bytes,3,opt,name=imageBase64,proto3" json:"imageBase64,omitempty"`
	Image       *ImageInfoE `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UploadImageRequest) Reset() {
	*x = UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest) ProtoMessage() {}

func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{4}
}

func (x *UploadImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadImageRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UploadImageRequest) GetImageBase64() string {
	if x != nil {
		return x.ImageBase64
	}
	return ""
}

func (x *UploadImageRequest) GetImage() *ImageInfoE {
	if x != nil {
		return x.Image
	}
	return nil
}

type UploadImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   *Error      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Key   string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Image *ImageInfoE `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UploadImageResponse) Reset() {
	*x = UploadImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageResponse) ProtoMessage() {}

func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{5}
}

func (x *UploadImageResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadImageResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UploadImageResponse) GetImage() *ImageInfoE {
	if x != nil {
		return x.Image
	}
	return nil
}

// UploadImageListWhere 필터 조건 정보
type UploadImageListWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceIds  []string `protobuf:"bytes,1,rep,name=serviceIds,proto3" json:"serviceIds,omitempty"`
	ServiceType string   `protobuf:"bytes,2,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (x *UploadImageListWhere) Reset() {
	*x = UploadImageListWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageListWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageListWhere) ProtoMessage() {}

func (x *UploadImageListWhere) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageListWhere.ProtoReflect.Descriptor instead.
func (*UploadImageListWhere) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{6}
}

func (x *UploadImageListWhere) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

func (x *UploadImageListWhere) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

type UploadImageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First   int32                 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	After   string                `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	Offset  int32                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy *OrderByE             `protobuf:"bytes,4,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Where   *UploadImageListWhere `protobuf:"bytes,5,opt,name=where,proto3" json:"where,omitempty"`
}

func (x *UploadImageListRequest) Reset() {
	*x = UploadImageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageListRequest) ProtoMessage() {}

func (x *UploadImageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageListRequest.ProtoReflect.Descriptor instead.
func (*UploadImageListRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{7}
}

func (x *UploadImageListRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *UploadImageListRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *UploadImageListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UploadImageListRequest) GetOrderBy() *OrderByE {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *UploadImageListRequest) GetWhere() *UploadImageListWhere {
	if x != nil {
		return x.Where
	}
	return nil
}

type UploadImageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err          *Error          `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Total        int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	UploadImages []*UploadImageE `protobuf:"bytes,3,rep,name=uploadImages,proto3" json:"uploadImages,omitempty"`
}

func (x *UploadImageListResponse) Reset() {
	*x = UploadImageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageListResponse) ProtoMessage() {}

func (x *UploadImageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageListResponse.ProtoReflect.Descriptor instead.
func (*UploadImageListResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{8}
}

func (x *UploadImageListResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadImageListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UploadImageListResponse) GetUploadImages() []*UploadImageE {
	if x != nil {
		return x.UploadImages
	}
	return nil
}

type UploadImageMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceIds  []string `protobuf:"bytes,1,rep,name=serviceIds,proto3" json:"serviceIds,omitempty"`
	ServiceType string   `protobuf:"bytes,2,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (x *UploadImageMapRequest) Reset() {
	*x = UploadImageMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageMapRequest) ProtoMessage() {}

func (x *UploadImageMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageMapRequest.ProtoReflect.Descriptor instead.
func (*UploadImageMapRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{9}
}

func (x *UploadImageMapRequest) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

func (x *UploadImageMapRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

type UploadImageMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err             *Error                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	UploadMapImages map[string]*UploadImagesE `protobuf:"bytes,2,rep,name=uploadMapImages,proto3" json:"uploadMapImages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UploadImageMapResponse) Reset() {
	*x = UploadImageMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageMapResponse) ProtoMessage() {}

func (x *UploadImageMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageMapResponse.ProtoReflect.Descriptor instead.
func (*UploadImageMapResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{10}
}

func (x *UploadImageMapResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadImageMapResponse) GetUploadMapImages() map[string]*UploadImagesE {
	if x != nil {
		return x.UploadMapImages
	}
	return nil
}

// UploadHealthRequest health request
type UploadHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadHealthRequest) Reset() {
	*x = UploadHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHealthRequest) ProtoMessage() {}

func (x *UploadHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHealthRequest.ProtoReflect.Descriptor instead.
func (*UploadHealthRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{11}
}

// UploadHealthResponse health response
type UploadHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UploadHealthResponse) Reset() {
	*x = UploadHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadHealthResponse) ProtoMessage() {}

func (x *UploadHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadHealthResponse.ProtoReflect.Descriptor instead.
func (*UploadHealthResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{12}
}

func (x *UploadHealthResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadHealthResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// UploadFileRequest
type UploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionType string `protobuf:"bytes,1,opt,name=functionType,proto3" json:"functionType,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	File         string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{13}
}

func (x *UploadFileRequest) GetFunctionType() string {
	if x != nil {
		return x.FunctionType
	}
	return ""
}

func (x *UploadFileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadFileRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

// UploadFileResponse
type UploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{14}
}

func (x *UploadFileResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *UploadFileResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// SingleUploadFileRequest
type SingleUploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionType string  `protobuf:"bytes,1,opt,name=functionType,proto3" json:"functionType,omitempty"`
	Id           string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	File         *Upload `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *SingleUploadFileRequest) Reset() {
	*x = SingleUploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUploadFileRequest) ProtoMessage() {}

func (x *SingleUploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUploadFileRequest.ProtoReflect.Descriptor instead.
func (*SingleUploadFileRequest) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{15}
}

func (x *SingleUploadFileRequest) GetFunctionType() string {
	if x != nil {
		return x.FunctionType
	}
	return ""
}

func (x *SingleUploadFileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SingleUploadFileRequest) GetFile() *Upload {
	if x != nil {
		return x.File
	}
	return nil
}

// SingleUploadFileResponse
type SingleUploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SingleUploadFileResponse) Reset() {
	*x = SingleUploadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUploadFileResponse) ProtoMessage() {}

func (x *SingleUploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUploadFileResponse.ProtoReflect.Descriptor instead.
func (*SingleUploadFileResponse) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{16}
}

func (x *SingleUploadFileResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *SingleUploadFileResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Upload
type Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Filename    string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Size        int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty"`
}

func (x *Upload) Reset() {
	*x = Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_upload_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_v1_upload_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_v1_upload_api_proto_rawDescGZIP(), []int{17}
}

func (x *Upload) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Upload) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Upload) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Upload) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

var File_v1_upload_api_proto protoreflect.FileDescriptor

var file_v1_upload_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x19, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x51, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x64, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x60, 0x0a, 0x19, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x6a,
	0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x45, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x45, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x59, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x55,
	0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x14,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x17, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x18, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6e, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0xd8, 0x04, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x50, 0x49, 0x12, 0x53, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e,
	0x76, 0x31, 0x42, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2f, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f,
	0x2e, 0x76, 0x31, 0xca, 0x02, 0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x5c, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_upload_api_proto_rawDescOnce sync.Once
	file_v1_upload_api_proto_rawDescData = file_v1_upload_api_proto_rawDesc
)

func file_v1_upload_api_proto_rawDescGZIP() []byte {
	file_v1_upload_api_proto_rawDescOnce.Do(func() {
		file_v1_upload_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_upload_api_proto_rawDescData)
	})
	return file_v1_upload_api_proto_rawDescData
}

var file_v1_upload_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_v1_upload_api_proto_goTypes = []interface{}{
	(*UploadGraphqlQueryRequest)(nil),  // 0: v1.UploadGraphqlQueryRequest
	(*UploadGraphqlQueryResponse)(nil), // 1: v1.UploadGraphqlQueryResponse
	(*UploadPdfToImagesRequest)(nil),   // 2: v1.UploadPdfToImagesRequest
	(*UploadPdfToImagesResponse)(nil),  // 3: v1.UploadPdfToImagesResponse
	(*UploadImageRequest)(nil),         // 4: v1.UploadImageRequest
	(*UploadImageResponse)(nil),        // 5: v1.UploadImageResponse
	(*UploadImageListWhere)(nil),       // 6: v1.UploadImageListWhere
	(*UploadImageListRequest)(nil),     // 7: v1.UploadImageListRequest
	(*UploadImageListResponse)(nil),    // 8: v1.UploadImageListResponse
	(*UploadImageMapRequest)(nil),      // 9: v1.UploadImageMapRequest
	(*UploadImageMapResponse)(nil),     // 10: v1.UploadImageMapResponse
	(*UploadHealthRequest)(nil),        // 11: v1.UploadHealthRequest
	(*UploadHealthResponse)(nil),       // 12: v1.UploadHealthResponse
	(*UploadFileRequest)(nil),          // 13: v1.UploadFileRequest
	(*UploadFileResponse)(nil),         // 14: v1.UploadFileResponse
	(*SingleUploadFileRequest)(nil),    // 15: v1.SingleUploadFileRequest
	(*SingleUploadFileResponse)(nil),   // 16: v1.SingleUploadFileResponse
	(*Upload)(nil),                     // 17: v1.Upload
	nil,                                // 18: v1.UploadImageMapResponse.UploadMapImagesEntry
	(*Error)(nil),                      // 19: v1.Error
	(*ImageInfoE)(nil),                 // 20: v1.ImageInfoE
	(*OrderByE)(nil),                   // 21: v1.OrderByE
	(*UploadImageE)(nil),               // 22: v1.UploadImageE
	(*UploadImagesE)(nil),              // 23: v1.UploadImagesE
}
var file_v1_upload_api_proto_depIdxs = []int32{
	19, // 0: v1.UploadGraphqlQueryResponse.err:type_name -> v1.Error
	19, // 1: v1.UploadPdfToImagesResponse.err:type_name -> v1.Error
	20, // 2: v1.UploadPdfToImagesResponse.images:type_name -> v1.ImageInfoE
	20, // 3: v1.UploadImageRequest.image:type_name -> v1.ImageInfoE
	19, // 4: v1.UploadImageResponse.err:type_name -> v1.Error
	20, // 5: v1.UploadImageResponse.image:type_name -> v1.ImageInfoE
	21, // 6: v1.UploadImageListRequest.orderBy:type_name -> v1.OrderByE
	6,  // 7: v1.UploadImageListRequest.where:type_name -> v1.UploadImageListWhere
	19, // 8: v1.UploadImageListResponse.err:type_name -> v1.Error
	22, // 9: v1.UploadImageListResponse.uploadImages:type_name -> v1.UploadImageE
	19, // 10: v1.UploadImageMapResponse.err:type_name -> v1.Error
	18, // 11: v1.UploadImageMapResponse.uploadMapImages:type_name -> v1.UploadImageMapResponse.UploadMapImagesEntry
	19, // 12: v1.UploadHealthResponse.err:type_name -> v1.Error
	19, // 13: v1.UploadFileResponse.err:type_name -> v1.Error
	17, // 14: v1.SingleUploadFileRequest.file:type_name -> v1.Upload
	19, // 15: v1.SingleUploadFileResponse.err:type_name -> v1.Error
	23, // 16: v1.UploadImageMapResponse.UploadMapImagesEntry.value:type_name -> v1.UploadImagesE
	0,  // 17: v1.UploadAPI.UploadGraphqlQuery:input_type -> v1.UploadGraphqlQueryRequest
	2,  // 18: v1.UploadAPI.UploadPdfToImages:input_type -> v1.UploadPdfToImagesRequest
	4,  // 19: v1.UploadAPI.UploadImage:input_type -> v1.UploadImageRequest
	7,  // 20: v1.UploadAPI.UploadImageList:input_type -> v1.UploadImageListRequest
	9,  // 21: v1.UploadAPI.UploadImageMap:input_type -> v1.UploadImageMapRequest
	11, // 22: v1.UploadAPI.UploadHealth:input_type -> v1.UploadHealthRequest
	13, // 23: v1.UploadAPI.UploadFile:input_type -> v1.UploadFileRequest
	15, // 24: v1.UploadAPI.SingleUploadFile:input_type -> v1.SingleUploadFileRequest
	1,  // 25: v1.UploadAPI.UploadGraphqlQuery:output_type -> v1.UploadGraphqlQueryResponse
	3,  // 26: v1.UploadAPI.UploadPdfToImages:output_type -> v1.UploadPdfToImagesResponse
	5,  // 27: v1.UploadAPI.UploadImage:output_type -> v1.UploadImageResponse
	8,  // 28: v1.UploadAPI.UploadImageList:output_type -> v1.UploadImageListResponse
	10, // 29: v1.UploadAPI.UploadImageMap:output_type -> v1.UploadImageMapResponse
	12, // 30: v1.UploadAPI.UploadHealth:output_type -> v1.UploadHealthResponse
	14, // 31: v1.UploadAPI.UploadFile:output_type -> v1.UploadFileResponse
	16, // 32: v1.UploadAPI.SingleUploadFile:output_type -> v1.SingleUploadFileResponse
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v1_upload_api_proto_init() }
func file_v1_upload_api_proto_init() {
	if File_v1_upload_api_proto != nil {
		return
	}
	file_v1_base_proto_init()
	file_v1_upload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_upload_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGraphqlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGraphqlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPdfToImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPdfToImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageListWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUploadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_upload_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_upload_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_upload_api_proto_goTypes,
		DependencyIndexes: file_v1_upload_api_proto_depIdxs,
		MessageInfos:      file_v1_upload_api_proto_msgTypes,
	}.Build()
	File_v1_upload_api_proto = out.File
	file_v1_upload_api_proto_rawDesc = nil
	file_v1_upload_api_proto_goTypes = nil
	file_v1_upload_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UploadAPIClient is the client API for UploadAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadAPIClient interface {
	// UploadGraphqlQuery graphql query helper method.
	UploadGraphqlQuery(ctx context.Context, in *UploadGraphqlQueryRequest, opts ...grpc.CallOption) (*UploadGraphqlQueryResponse, error)
	// UploadPdfToImages image upload
	UploadPdfToImages(ctx context.Context, in *UploadPdfToImagesRequest, opts ...grpc.CallOption) (*UploadPdfToImagesResponse, error)
	// UploadImage image upload
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// UploadImageList ...
	UploadImageList(ctx context.Context, in *UploadImageListRequest, opts ...grpc.CallOption) (*UploadImageListResponse, error)
	// UploadImageMap ....
	UploadImageMap(ctx context.Context, in *UploadImageMapRequest, opts ...grpc.CallOption) (*UploadImageMapResponse, error)
	// UploadHealth check method.
	UploadHealth(ctx context.Context, in *UploadHealthRequest, opts ...grpc.CallOption) (*UploadHealthResponse, error)
	// UploadFile ...
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// UploadFile ...
	SingleUploadFile(ctx context.Context, in *SingleUploadFileRequest, opts ...grpc.CallOption) (*SingleUploadFileResponse, error)
}

type uploadAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadAPIClient(cc grpc.ClientConnInterface) UploadAPIClient {
	return &uploadAPIClient{cc}
}

func (c *uploadAPIClient) UploadGraphqlQuery(ctx context.Context, in *UploadGraphqlQueryRequest, opts ...grpc.CallOption) (*UploadGraphqlQueryResponse, error) {
	out := new(UploadGraphqlQueryResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadGraphqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadPdfToImages(ctx context.Context, in *UploadPdfToImagesRequest, opts ...grpc.CallOption) (*UploadPdfToImagesResponse, error) {
	out := new(UploadPdfToImagesResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadPdfToImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadImageList(ctx context.Context, in *UploadImageListRequest, opts ...grpc.CallOption) (*UploadImageListResponse, error) {
	out := new(UploadImageListResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadImageMap(ctx context.Context, in *UploadImageMapRequest, opts ...grpc.CallOption) (*UploadImageMapResponse, error) {
	out := new(UploadImageMapResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadImageMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadHealth(ctx context.Context, in *UploadHealthRequest, opts ...grpc.CallOption) (*UploadHealthResponse, error) {
	out := new(UploadHealthResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadAPIClient) SingleUploadFile(ctx context.Context, in *SingleUploadFileRequest, opts ...grpc.CallOption) (*SingleUploadFileResponse, error) {
	out := new(SingleUploadFileResponse)
	err := c.cc.Invoke(ctx, "/v1.UploadAPI/SingleUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadAPIServer is the server API for UploadAPI service.
type UploadAPIServer interface {
	// UploadGraphqlQuery graphql query helper method.
	UploadGraphqlQuery(context.Context, *UploadGraphqlQueryRequest) (*UploadGraphqlQueryResponse, error)
	// UploadPdfToImages image upload
	UploadPdfToImages(context.Context, *UploadPdfToImagesRequest) (*UploadPdfToImagesResponse, error)
	// UploadImage image upload
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// UploadImageList ...
	UploadImageList(context.Context, *UploadImageListRequest) (*UploadImageListResponse, error)
	// UploadImageMap ....
	UploadImageMap(context.Context, *UploadImageMapRequest) (*UploadImageMapResponse, error)
	// UploadHealth check method.
	UploadHealth(context.Context, *UploadHealthRequest) (*UploadHealthResponse, error)
	// UploadFile ...
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// UploadFile ...
	SingleUploadFile(context.Context, *SingleUploadFileRequest) (*SingleUploadFileResponse, error)
}

// UnimplementedUploadAPIServer can be embedded to have forward compatible implementations.
type UnimplementedUploadAPIServer struct {
}

func (*UnimplementedUploadAPIServer) UploadGraphqlQuery(context.Context, *UploadGraphqlQueryRequest) (*UploadGraphqlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGraphqlQuery not implemented")
}
func (*UnimplementedUploadAPIServer) UploadPdfToImages(context.Context, *UploadPdfToImagesRequest) (*UploadPdfToImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPdfToImages not implemented")
}
func (*UnimplementedUploadAPIServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedUploadAPIServer) UploadImageList(context.Context, *UploadImageListRequest) (*UploadImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageList not implemented")
}
func (*UnimplementedUploadAPIServer) UploadImageMap(context.Context, *UploadImageMapRequest) (*UploadImageMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageMap not implemented")
}
func (*UnimplementedUploadAPIServer) UploadHealth(context.Context, *UploadHealthRequest) (*UploadHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadHealth not implemented")
}
func (*UnimplementedUploadAPIServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedUploadAPIServer) SingleUploadFile(context.Context, *SingleUploadFileRequest) (*SingleUploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleUploadFile not implemented")
}

func RegisterUploadAPIServer(s *grpc.Server, srv UploadAPIServer) {
	s.RegisterService(&_UploadAPI_serviceDesc, srv)
}

func _UploadAPI_UploadGraphqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGraphqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadGraphqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadGraphqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadGraphqlQuery(ctx, req.(*UploadGraphqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadPdfToImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPdfToImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadPdfToImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadPdfToImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadPdfToImages(ctx, req.(*UploadPdfToImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadImageList(ctx, req.(*UploadImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadImageMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadImageMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadImageMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadImageMap(ctx, req.(*UploadImageMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadHealth(ctx, req.(*UploadHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadAPI_SingleUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadAPIServer).SingleUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UploadAPI/SingleUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadAPIServer).SingleUploadFile(ctx, req.(*SingleUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UploadAPI",
	HandlerType: (*UploadAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadGraphqlQuery",
			Handler:    _UploadAPI_UploadGraphqlQuery_Handler,
		},
		{
			MethodName: "UploadPdfToImages",
			Handler:    _UploadAPI_UploadPdfToImages_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _UploadAPI_UploadImage_Handler,
		},
		{
			MethodName: "UploadImageList",
			Handler:    _UploadAPI_UploadImageList_Handler,
		},
		{
			MethodName: "UploadImageMap",
			Handler:    _UploadAPI_UploadImageMap_Handler,
		},
		{
			MethodName: "UploadHealth",
			Handler:    _UploadAPI_UploadHealth_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _UploadAPI_UploadFile_Handler,
		},
		{
			MethodName: "SingleUploadFile",
			Handler:    _UploadAPI_SingleUploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/upload_api.proto",
}
