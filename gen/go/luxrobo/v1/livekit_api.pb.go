// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.8.0
// source: v1/livekit_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LivekitHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LivekitHealthRequest) Reset() {
	*x = LivekitHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitHealthRequest) ProtoMessage() {}

func (x *LivekitHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitHealthRequest.ProtoReflect.Descriptor instead.
func (*LivekitHealthRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{0}
}

type LivekitHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LivekitHealthResponse) Reset() {
	*x = LivekitHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitHealthResponse) ProtoMessage() {}

func (x *LivekitHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitHealthResponse.ProtoReflect.Descriptor instead.
func (*LivekitHealthResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{1}
}

func (x *LivekitHealthResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitHealthResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type LivekitGetJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LivekitGetJoinTokenRequest) Reset() {
	*x = LivekitGetJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitGetJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitGetJoinTokenRequest) ProtoMessage() {}

func (x *LivekitGetJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitGetJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*LivekitGetJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{2}
}

func (x *LivekitGetJoinTokenRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *LivekitGetJoinTokenRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *LivekitGetJoinTokenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LivekitGetJoinTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LivekitGetJoinTokenResponse) Reset() {
	*x = LivekitGetJoinTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitGetJoinTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitGetJoinTokenResponse) ProtoMessage() {}

func (x *LivekitGetJoinTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitGetJoinTokenResponse.ProtoReflect.Descriptor instead.
func (*LivekitGetJoinTokenResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{3}
}

func (x *LivekitGetJoinTokenResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitGetJoinTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LivekitListRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LivekitListRoomRequest) Reset() {
	*x = LivekitListRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitListRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitListRoomRequest) ProtoMessage() {}

func (x *LivekitListRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitListRoomRequest.ProtoReflect.Descriptor instead.
func (*LivekitListRoomRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{4}
}

type LivekitListRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   *Error          `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Rooms []*LivekitRoomE `protobuf:"bytes,2,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *LivekitListRoomResponse) Reset() {
	*x = LivekitListRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitListRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitListRoomResponse) ProtoMessage() {}

func (x *LivekitListRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitListRoomResponse.ProtoReflect.Descriptor instead.
func (*LivekitListRoomResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{5}
}

func (x *LivekitListRoomResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitListRoomResponse) GetRooms() []*LivekitRoomE {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type LivekitListParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
}

func (x *LivekitListParticipantsRequest) Reset() {
	*x = LivekitListParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitListParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitListParticipantsRequest) ProtoMessage() {}

func (x *LivekitListParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitListParticipantsRequest.ProtoReflect.Descriptor instead.
func (*LivekitListParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{6}
}

func (x *LivekitListParticipantsRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

type LivekitListParticipantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err          *Error                 `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Participants []*LivekitParticipantE `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *LivekitListParticipantsResponse) Reset() {
	*x = LivekitListParticipantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitListParticipantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitListParticipantsResponse) ProtoMessage() {}

func (x *LivekitListParticipantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitListParticipantsResponse.ProtoReflect.Descriptor instead.
func (*LivekitListParticipantsResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{7}
}

func (x *LivekitListParticipantsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitListParticipantsResponse) GetParticipants() []*LivekitParticipantE {
	if x != nil {
		return x.Participants
	}
	return nil
}

type LivekitCreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
}

func (x *LivekitCreateRoomRequest) Reset() {
	*x = LivekitCreateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitCreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitCreateRoomRequest) ProtoMessage() {}

func (x *LivekitCreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitCreateRoomRequest.ProtoReflect.Descriptor instead.
func (*LivekitCreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{8}
}

func (x *LivekitCreateRoomRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

type LivekitCreateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  *Error        `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Room *LivekitRoomE `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *LivekitCreateRoomResponse) Reset() {
	*x = LivekitCreateRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitCreateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitCreateRoomResponse) ProtoMessage() {}

func (x *LivekitCreateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitCreateRoomResponse.ProtoReflect.Descriptor instead.
func (*LivekitCreateRoomResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{9}
}

func (x *LivekitCreateRoomResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitCreateRoomResponse) GetRoom() *LivekitRoomE {
	if x != nil {
		return x.Room
	}
	return nil
}

type LivekitDeleteRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
}

func (x *LivekitDeleteRoomRequest) Reset() {
	*x = LivekitDeleteRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitDeleteRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitDeleteRoomRequest) ProtoMessage() {}

func (x *LivekitDeleteRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitDeleteRoomRequest.ProtoReflect.Descriptor instead.
func (*LivekitDeleteRoomRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{10}
}

func (x *LivekitDeleteRoomRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

type LivekitDeleteRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LivekitDeleteRoomResponse) Reset() {
	*x = LivekitDeleteRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitDeleteRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitDeleteRoomResponse) ProtoMessage() {}

func (x *LivekitDeleteRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitDeleteRoomResponse.ProtoReflect.Descriptor instead.
func (*LivekitDeleteRoomResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{11}
}

func (x *LivekitDeleteRoomResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitDeleteRoomResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LivekitRemoveParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *LivekitRemoveParticipantRequest) Reset() {
	*x = LivekitRemoveParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitRemoveParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitRemoveParticipantRequest) ProtoMessage() {}

func (x *LivekitRemoveParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitRemoveParticipantRequest.ProtoReflect.Descriptor instead.
func (*LivekitRemoveParticipantRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{12}
}

func (x *LivekitRemoveParticipantRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *LivekitRemoveParticipantRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type LivekitRemoveParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LivekitRemoveParticipantResponse) Reset() {
	*x = LivekitRemoveParticipantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitRemoveParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitRemoveParticipantResponse) ProtoMessage() {}

func (x *LivekitRemoveParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitRemoveParticipantResponse.ProtoReflect.Descriptor instead.
func (*LivekitRemoveParticipantResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{13}
}

func (x *LivekitRemoveParticipantResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitRemoveParticipantResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LivekitMuteParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=roomName,proto3" json:"roomName,omitempty"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	TrackSid string `protobuf:"bytes,3,opt,name=trackSid,proto3" json:"trackSid,omitempty"`
	Muted    bool   `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
}

func (x *LivekitMuteParticipantRequest) Reset() {
	*x = LivekitMuteParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitMuteParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitMuteParticipantRequest) ProtoMessage() {}

func (x *LivekitMuteParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitMuteParticipantRequest.ProtoReflect.Descriptor instead.
func (*LivekitMuteParticipantRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{14}
}

func (x *LivekitMuteParticipantRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *LivekitMuteParticipantRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *LivekitMuteParticipantRequest) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *LivekitMuteParticipantRequest) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

type LivekitMuteParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LivekitMuteParticipantResponse) Reset() {
	*x = LivekitMuteParticipantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitMuteParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitMuteParticipantResponse) ProtoMessage() {}

func (x *LivekitMuteParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitMuteParticipantResponse.ProtoReflect.Descriptor instead.
func (*LivekitMuteParticipantResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{15}
}

func (x *LivekitMuteParticipantResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitMuteParticipantResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LivekitSendDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room            string                    `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Data            string                    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Kind            LivekitDataPacketKindType `protobuf:"varint,3,opt,name=kind,proto3,enum=v1.LivekitDataPacketKindType" json:"kind,omitempty"`
	DestinationSids []string                  `protobuf:"bytes,4,rep,name=destinationSids,proto3" json:"destinationSids,omitempty"`
}

func (x *LivekitSendDataRequest) Reset() {
	*x = LivekitSendDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitSendDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitSendDataRequest) ProtoMessage() {}

func (x *LivekitSendDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitSendDataRequest.ProtoReflect.Descriptor instead.
func (*LivekitSendDataRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{16}
}

func (x *LivekitSendDataRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *LivekitSendDataRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *LivekitSendDataRequest) GetKind() LivekitDataPacketKindType {
	if x != nil {
		return x.Kind
	}
	return LivekitDataPacketKindType_RELIABLE
}

func (x *LivekitSendDataRequest) GetDestinationSids() []string {
	if x != nil {
		return x.DestinationSids
	}
	return nil
}

type LivekitSendDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     *Error `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LivekitSendDataResponse) Reset() {
	*x = LivekitSendDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitSendDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitSendDataResponse) ProtoMessage() {}

func (x *LivekitSendDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitSendDataResponse.ProtoReflect.Descriptor instead.
func (*LivekitSendDataResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{17}
}

func (x *LivekitSendDataResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitSendDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LivekitUpdateRoomMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room     string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LivekitUpdateRoomMetadataRequest) Reset() {
	*x = LivekitUpdateRoomMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitUpdateRoomMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitUpdateRoomMetadataRequest) ProtoMessage() {}

func (x *LivekitUpdateRoomMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitUpdateRoomMetadataRequest.ProtoReflect.Descriptor instead.
func (*LivekitUpdateRoomMetadataRequest) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{18}
}

func (x *LivekitUpdateRoomMetadataRequest) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *LivekitUpdateRoomMetadataRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type LivekitUpdateRoomMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  *Error        `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Room *LivekitRoomE `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *LivekitUpdateRoomMetadataResponse) Reset() {
	*x = LivekitUpdateRoomMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_livekit_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivekitUpdateRoomMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivekitUpdateRoomMetadataResponse) ProtoMessage() {}

func (x *LivekitUpdateRoomMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_livekit_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivekitUpdateRoomMetadataResponse.ProtoReflect.Descriptor instead.
func (*LivekitUpdateRoomMetadataResponse) Descriptor() ([]byte, []int) {
	return file_v1_livekit_api_proto_rawDescGZIP(), []int{19}
}

func (x *LivekitUpdateRoomMetadataResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *LivekitUpdateRoomMetadataResponse) GetRoom() *LivekitRoomE {
	if x != nil {
		return x.Room
	}
	return nil
}

var File_v1_livekit_api_proto protoreflect.FileDescriptor

var file_v1_livekit_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4c, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x68, 0x0a, 0x1a, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x1b, 0x4c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x18, 0x0a, 0x16,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x26,
	0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x52,
	0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x3c, 0x0a, 0x1e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x1f, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x45, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x22, 0x36, 0x0a, 0x18, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x4c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x45, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x36, 0x0a, 0x18, 0x4c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x52, 0x0a, 0x19, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a, 0x1f, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x59, 0x0a, 0x20, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x1e, 0x4c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73,
	0x22, 0x50, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x52, 0x0a, 0x20, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x21, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x32, 0x86,
	0x09, 0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x41, 0x50, 0x49, 0x12, 0x44, 0x0a,
	0x0d, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x4c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x13, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x4c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x19, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c,
	0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0a, 0x6c, 0x75, 0x78,
	0x72, 0x6f, 0x62, 0x6f, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x0a,
	0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e, 0x76, 0x31, 0xca, 0x02, 0x0a, 0x4c, 0x75, 0x78,
	0x72, 0x6f, 0x62, 0x6f, 0x5c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_livekit_api_proto_rawDescOnce sync.Once
	file_v1_livekit_api_proto_rawDescData = file_v1_livekit_api_proto_rawDesc
)

func file_v1_livekit_api_proto_rawDescGZIP() []byte {
	file_v1_livekit_api_proto_rawDescOnce.Do(func() {
		file_v1_livekit_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_livekit_api_proto_rawDescData)
	})
	return file_v1_livekit_api_proto_rawDescData
}

var file_v1_livekit_api_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_v1_livekit_api_proto_goTypes = []interface{}{
	(*LivekitHealthRequest)(nil),              // 0: v1.LivekitHealthRequest
	(*LivekitHealthResponse)(nil),             // 1: v1.LivekitHealthResponse
	(*LivekitGetJoinTokenRequest)(nil),        // 2: v1.LivekitGetJoinTokenRequest
	(*LivekitGetJoinTokenResponse)(nil),       // 3: v1.LivekitGetJoinTokenResponse
	(*LivekitListRoomRequest)(nil),            // 4: v1.LivekitListRoomRequest
	(*LivekitListRoomResponse)(nil),           // 5: v1.LivekitListRoomResponse
	(*LivekitListParticipantsRequest)(nil),    // 6: v1.LivekitListParticipantsRequest
	(*LivekitListParticipantsResponse)(nil),   // 7: v1.LivekitListParticipantsResponse
	(*LivekitCreateRoomRequest)(nil),          // 8: v1.LivekitCreateRoomRequest
	(*LivekitCreateRoomResponse)(nil),         // 9: v1.LivekitCreateRoomResponse
	(*LivekitDeleteRoomRequest)(nil),          // 10: v1.LivekitDeleteRoomRequest
	(*LivekitDeleteRoomResponse)(nil),         // 11: v1.LivekitDeleteRoomResponse
	(*LivekitRemoveParticipantRequest)(nil),   // 12: v1.LivekitRemoveParticipantRequest
	(*LivekitRemoveParticipantResponse)(nil),  // 13: v1.LivekitRemoveParticipantResponse
	(*LivekitMuteParticipantRequest)(nil),     // 14: v1.LivekitMuteParticipantRequest
	(*LivekitMuteParticipantResponse)(nil),    // 15: v1.LivekitMuteParticipantResponse
	(*LivekitSendDataRequest)(nil),            // 16: v1.LivekitSendDataRequest
	(*LivekitSendDataResponse)(nil),           // 17: v1.LivekitSendDataResponse
	(*LivekitUpdateRoomMetadataRequest)(nil),  // 18: v1.LivekitUpdateRoomMetadataRequest
	(*LivekitUpdateRoomMetadataResponse)(nil), // 19: v1.LivekitUpdateRoomMetadataResponse
	(*Error)(nil),                  // 20: v1.Error
	(*LivekitRoomE)(nil),           // 21: v1.LivekitRoomE
	(*LivekitParticipantE)(nil),    // 22: v1.LivekitParticipantE
	(LivekitDataPacketKindType)(0), // 23: v1.LivekitDataPacketKindType
}
var file_v1_livekit_api_proto_depIdxs = []int32{
	20, // 0: v1.LivekitHealthResponse.err:type_name -> v1.Error
	20, // 1: v1.LivekitGetJoinTokenResponse.err:type_name -> v1.Error
	20, // 2: v1.LivekitListRoomResponse.err:type_name -> v1.Error
	21, // 3: v1.LivekitListRoomResponse.rooms:type_name -> v1.LivekitRoomE
	20, // 4: v1.LivekitListParticipantsResponse.err:type_name -> v1.Error
	22, // 5: v1.LivekitListParticipantsResponse.participants:type_name -> v1.LivekitParticipantE
	20, // 6: v1.LivekitCreateRoomResponse.err:type_name -> v1.Error
	21, // 7: v1.LivekitCreateRoomResponse.room:type_name -> v1.LivekitRoomE
	20, // 8: v1.LivekitDeleteRoomResponse.err:type_name -> v1.Error
	20, // 9: v1.LivekitRemoveParticipantResponse.err:type_name -> v1.Error
	20, // 10: v1.LivekitMuteParticipantResponse.err:type_name -> v1.Error
	23, // 11: v1.LivekitSendDataRequest.kind:type_name -> v1.LivekitDataPacketKindType
	20, // 12: v1.LivekitSendDataResponse.err:type_name -> v1.Error
	20, // 13: v1.LivekitUpdateRoomMetadataResponse.err:type_name -> v1.Error
	21, // 14: v1.LivekitUpdateRoomMetadataResponse.room:type_name -> v1.LivekitRoomE
	0,  // 15: v1.LivekitAPI.LivekitHealth:input_type -> v1.LivekitHealthRequest
	2,  // 16: v1.LivekitAPI.LivekitGetUserToken:input_type -> v1.LivekitGetJoinTokenRequest
	2,  // 17: v1.LivekitAPI.LivekitGetTutorToken:input_type -> v1.LivekitGetJoinTokenRequest
	2,  // 18: v1.LivekitAPI.LivekitGetAdminToken:input_type -> v1.LivekitGetJoinTokenRequest
	2,  // 19: v1.LivekitAPI.LivekitGetJoinToken:input_type -> v1.LivekitGetJoinTokenRequest
	4,  // 20: v1.LivekitAPI.LivekitListRoom:input_type -> v1.LivekitListRoomRequest
	6,  // 21: v1.LivekitAPI.LivekitListParticipants:input_type -> v1.LivekitListParticipantsRequest
	8,  // 22: v1.LivekitAPI.LivekitCreateRoom:input_type -> v1.LivekitCreateRoomRequest
	10, // 23: v1.LivekitAPI.LivekitDeleteRoom:input_type -> v1.LivekitDeleteRoomRequest
	12, // 24: v1.LivekitAPI.LivekitRemoveParticipant:input_type -> v1.LivekitRemoveParticipantRequest
	14, // 25: v1.LivekitAPI.LivekitMuteParticipant:input_type -> v1.LivekitMuteParticipantRequest
	16, // 26: v1.LivekitAPI.LivekitSendData:input_type -> v1.LivekitSendDataRequest
	18, // 27: v1.LivekitAPI.LivekitUpdateRoomMetadata:input_type -> v1.LivekitUpdateRoomMetadataRequest
	1,  // 28: v1.LivekitAPI.LivekitHealth:output_type -> v1.LivekitHealthResponse
	3,  // 29: v1.LivekitAPI.LivekitGetUserToken:output_type -> v1.LivekitGetJoinTokenResponse
	3,  // 30: v1.LivekitAPI.LivekitGetTutorToken:output_type -> v1.LivekitGetJoinTokenResponse
	3,  // 31: v1.LivekitAPI.LivekitGetAdminToken:output_type -> v1.LivekitGetJoinTokenResponse
	3,  // 32: v1.LivekitAPI.LivekitGetJoinToken:output_type -> v1.LivekitGetJoinTokenResponse
	5,  // 33: v1.LivekitAPI.LivekitListRoom:output_type -> v1.LivekitListRoomResponse
	7,  // 34: v1.LivekitAPI.LivekitListParticipants:output_type -> v1.LivekitListParticipantsResponse
	9,  // 35: v1.LivekitAPI.LivekitCreateRoom:output_type -> v1.LivekitCreateRoomResponse
	11, // 36: v1.LivekitAPI.LivekitDeleteRoom:output_type -> v1.LivekitDeleteRoomResponse
	13, // 37: v1.LivekitAPI.LivekitRemoveParticipant:output_type -> v1.LivekitRemoveParticipantResponse
	15, // 38: v1.LivekitAPI.LivekitMuteParticipant:output_type -> v1.LivekitMuteParticipantResponse
	17, // 39: v1.LivekitAPI.LivekitSendData:output_type -> v1.LivekitSendDataResponse
	19, // 40: v1.LivekitAPI.LivekitUpdateRoomMetadata:output_type -> v1.LivekitUpdateRoomMetadataResponse
	28, // [28:41] is the sub-list for method output_type
	15, // [15:28] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_v1_livekit_api_proto_init() }
func file_v1_livekit_api_proto_init() {
	if File_v1_livekit_api_proto != nil {
		return
	}
	file_v1_enum_proto_init()
	file_v1_base_proto_init()
	file_v1_livekit_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_livekit_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitGetJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitGetJoinTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitListRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitListRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitListParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitListParticipantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitCreateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitCreateRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitDeleteRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitDeleteRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitRemoveParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitRemoveParticipantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitMuteParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitMuteParticipantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitSendDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitSendDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitUpdateRoomMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_livekit_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivekitUpdateRoomMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_livekit_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_livekit_api_proto_goTypes,
		DependencyIndexes: file_v1_livekit_api_proto_depIdxs,
		MessageInfos:      file_v1_livekit_api_proto_msgTypes,
	}.Build()
	File_v1_livekit_api_proto = out.File
	file_v1_livekit_api_proto_rawDesc = nil
	file_v1_livekit_api_proto_goTypes = nil
	file_v1_livekit_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LivekitAPIClient is the client API for LivekitAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LivekitAPIClient interface {
	LivekitHealth(ctx context.Context, in *LivekitHealthRequest, opts ...grpc.CallOption) (*LivekitHealthResponse, error)
	LivekitGetUserToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error)
	LivekitGetTutorToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error)
	LivekitGetAdminToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error)
	LivekitGetJoinToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error)
	LivekitListRoom(ctx context.Context, in *LivekitListRoomRequest, opts ...grpc.CallOption) (*LivekitListRoomResponse, error)
	LivekitListParticipants(ctx context.Context, in *LivekitListParticipantsRequest, opts ...grpc.CallOption) (*LivekitListParticipantsResponse, error)
	LivekitCreateRoom(ctx context.Context, in *LivekitCreateRoomRequest, opts ...grpc.CallOption) (*LivekitCreateRoomResponse, error)
	LivekitDeleteRoom(ctx context.Context, in *LivekitDeleteRoomRequest, opts ...grpc.CallOption) (*LivekitDeleteRoomResponse, error)
	LivekitRemoveParticipant(ctx context.Context, in *LivekitRemoveParticipantRequest, opts ...grpc.CallOption) (*LivekitRemoveParticipantResponse, error)
	LivekitMuteParticipant(ctx context.Context, in *LivekitMuteParticipantRequest, opts ...grpc.CallOption) (*LivekitMuteParticipantResponse, error)
	LivekitSendData(ctx context.Context, in *LivekitSendDataRequest, opts ...grpc.CallOption) (*LivekitSendDataResponse, error)
	LivekitUpdateRoomMetadata(ctx context.Context, in *LivekitUpdateRoomMetadataRequest, opts ...grpc.CallOption) (*LivekitUpdateRoomMetadataResponse, error)
}

type livekitAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLivekitAPIClient(cc grpc.ClientConnInterface) LivekitAPIClient {
	return &livekitAPIClient{cc}
}

func (c *livekitAPIClient) LivekitHealth(ctx context.Context, in *LivekitHealthRequest, opts ...grpc.CallOption) (*LivekitHealthResponse, error) {
	out := new(LivekitHealthResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitGetUserToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error) {
	out := new(LivekitGetJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitGetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitGetTutorToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error) {
	out := new(LivekitGetJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitGetTutorToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitGetAdminToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error) {
	out := new(LivekitGetJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitGetAdminToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitGetJoinToken(ctx context.Context, in *LivekitGetJoinTokenRequest, opts ...grpc.CallOption) (*LivekitGetJoinTokenResponse, error) {
	out := new(LivekitGetJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitGetJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitListRoom(ctx context.Context, in *LivekitListRoomRequest, opts ...grpc.CallOption) (*LivekitListRoomResponse, error) {
	out := new(LivekitListRoomResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitListRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitListParticipants(ctx context.Context, in *LivekitListParticipantsRequest, opts ...grpc.CallOption) (*LivekitListParticipantsResponse, error) {
	out := new(LivekitListParticipantsResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitListParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitCreateRoom(ctx context.Context, in *LivekitCreateRoomRequest, opts ...grpc.CallOption) (*LivekitCreateRoomResponse, error) {
	out := new(LivekitCreateRoomResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitCreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitDeleteRoom(ctx context.Context, in *LivekitDeleteRoomRequest, opts ...grpc.CallOption) (*LivekitDeleteRoomResponse, error) {
	out := new(LivekitDeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitDeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitRemoveParticipant(ctx context.Context, in *LivekitRemoveParticipantRequest, opts ...grpc.CallOption) (*LivekitRemoveParticipantResponse, error) {
	out := new(LivekitRemoveParticipantResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitRemoveParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitMuteParticipant(ctx context.Context, in *LivekitMuteParticipantRequest, opts ...grpc.CallOption) (*LivekitMuteParticipantResponse, error) {
	out := new(LivekitMuteParticipantResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitMuteParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitSendData(ctx context.Context, in *LivekitSendDataRequest, opts ...grpc.CallOption) (*LivekitSendDataResponse, error) {
	out := new(LivekitSendDataResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitSendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livekitAPIClient) LivekitUpdateRoomMetadata(ctx context.Context, in *LivekitUpdateRoomMetadataRequest, opts ...grpc.CallOption) (*LivekitUpdateRoomMetadataResponse, error) {
	out := new(LivekitUpdateRoomMetadataResponse)
	err := c.cc.Invoke(ctx, "/v1.LivekitAPI/LivekitUpdateRoomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivekitAPIServer is the server API for LivekitAPI service.
type LivekitAPIServer interface {
	LivekitHealth(context.Context, *LivekitHealthRequest) (*LivekitHealthResponse, error)
	LivekitGetUserToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error)
	LivekitGetTutorToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error)
	LivekitGetAdminToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error)
	LivekitGetJoinToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error)
	LivekitListRoom(context.Context, *LivekitListRoomRequest) (*LivekitListRoomResponse, error)
	LivekitListParticipants(context.Context, *LivekitListParticipantsRequest) (*LivekitListParticipantsResponse, error)
	LivekitCreateRoom(context.Context, *LivekitCreateRoomRequest) (*LivekitCreateRoomResponse, error)
	LivekitDeleteRoom(context.Context, *LivekitDeleteRoomRequest) (*LivekitDeleteRoomResponse, error)
	LivekitRemoveParticipant(context.Context, *LivekitRemoveParticipantRequest) (*LivekitRemoveParticipantResponse, error)
	LivekitMuteParticipant(context.Context, *LivekitMuteParticipantRequest) (*LivekitMuteParticipantResponse, error)
	LivekitSendData(context.Context, *LivekitSendDataRequest) (*LivekitSendDataResponse, error)
	LivekitUpdateRoomMetadata(context.Context, *LivekitUpdateRoomMetadataRequest) (*LivekitUpdateRoomMetadataResponse, error)
}

// UnimplementedLivekitAPIServer can be embedded to have forward compatible implementations.
type UnimplementedLivekitAPIServer struct {
}

func (*UnimplementedLivekitAPIServer) LivekitHealth(context.Context, *LivekitHealthRequest) (*LivekitHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitHealth not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitGetUserToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitGetUserToken not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitGetTutorToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitGetTutorToken not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitGetAdminToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitGetAdminToken not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitGetJoinToken(context.Context, *LivekitGetJoinTokenRequest) (*LivekitGetJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitGetJoinToken not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitListRoom(context.Context, *LivekitListRoomRequest) (*LivekitListRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitListRoom not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitListParticipants(context.Context, *LivekitListParticipantsRequest) (*LivekitListParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitListParticipants not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitCreateRoom(context.Context, *LivekitCreateRoomRequest) (*LivekitCreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitCreateRoom not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitDeleteRoom(context.Context, *LivekitDeleteRoomRequest) (*LivekitDeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitDeleteRoom not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitRemoveParticipant(context.Context, *LivekitRemoveParticipantRequest) (*LivekitRemoveParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitRemoveParticipant not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitMuteParticipant(context.Context, *LivekitMuteParticipantRequest) (*LivekitMuteParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitMuteParticipant not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitSendData(context.Context, *LivekitSendDataRequest) (*LivekitSendDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitSendData not implemented")
}
func (*UnimplementedLivekitAPIServer) LivekitUpdateRoomMetadata(context.Context, *LivekitUpdateRoomMetadataRequest) (*LivekitUpdateRoomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivekitUpdateRoomMetadata not implemented")
}

func RegisterLivekitAPIServer(s *grpc.Server, srv LivekitAPIServer) {
	s.RegisterService(&_LivekitAPI_serviceDesc, srv)
}

func _LivekitAPI_LivekitHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitHealth(ctx, req.(*LivekitHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitGetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitGetJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitGetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitGetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitGetUserToken(ctx, req.(*LivekitGetJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitGetTutorToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitGetJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitGetTutorToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitGetTutorToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitGetTutorToken(ctx, req.(*LivekitGetJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitGetAdminToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitGetJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitGetAdminToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitGetAdminToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitGetAdminToken(ctx, req.(*LivekitGetJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitGetJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitGetJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitGetJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitGetJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitGetJoinToken(ctx, req.(*LivekitGetJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitListRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitListRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitListRoom(ctx, req.(*LivekitListRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitListParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitListParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitListParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitListParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitListParticipants(ctx, req.(*LivekitListParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitCreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitCreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitCreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitCreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitCreateRoom(ctx, req.(*LivekitCreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitDeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitDeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitDeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitDeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitDeleteRoom(ctx, req.(*LivekitDeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitRemoveParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitRemoveParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitRemoveParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitRemoveParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitRemoveParticipant(ctx, req.(*LivekitRemoveParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitMuteParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitMuteParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitMuteParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitMuteParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitMuteParticipant(ctx, req.(*LivekitMuteParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitSendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitSendDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitSendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitSendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitSendData(ctx, req.(*LivekitSendDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivekitAPI_LivekitUpdateRoomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivekitUpdateRoomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivekitAPIServer).LivekitUpdateRoomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LivekitAPI/LivekitUpdateRoomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivekitAPIServer).LivekitUpdateRoomMetadata(ctx, req.(*LivekitUpdateRoomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LivekitAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LivekitAPI",
	HandlerType: (*LivekitAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LivekitHealth",
			Handler:    _LivekitAPI_LivekitHealth_Handler,
		},
		{
			MethodName: "LivekitGetUserToken",
			Handler:    _LivekitAPI_LivekitGetUserToken_Handler,
		},
		{
			MethodName: "LivekitGetTutorToken",
			Handler:    _LivekitAPI_LivekitGetTutorToken_Handler,
		},
		{
			MethodName: "LivekitGetAdminToken",
			Handler:    _LivekitAPI_LivekitGetAdminToken_Handler,
		},
		{
			MethodName: "LivekitGetJoinToken",
			Handler:    _LivekitAPI_LivekitGetJoinToken_Handler,
		},
		{
			MethodName: "LivekitListRoom",
			Handler:    _LivekitAPI_LivekitListRoom_Handler,
		},
		{
			MethodName: "LivekitListParticipants",
			Handler:    _LivekitAPI_LivekitListParticipants_Handler,
		},
		{
			MethodName: "LivekitCreateRoom",
			Handler:    _LivekitAPI_LivekitCreateRoom_Handler,
		},
		{
			MethodName: "LivekitDeleteRoom",
			Handler:    _LivekitAPI_LivekitDeleteRoom_Handler,
		},
		{
			MethodName: "LivekitRemoveParticipant",
			Handler:    _LivekitAPI_LivekitRemoveParticipant_Handler,
		},
		{
			MethodName: "LivekitMuteParticipant",
			Handler:    _LivekitAPI_LivekitMuteParticipant_Handler,
		},
		{
			MethodName: "LivekitSendData",
			Handler:    _LivekitAPI_LivekitSendData_Handler,
		},
		{
			MethodName: "LivekitUpdateRoomMetadata",
			Handler:    _LivekitAPI_LivekitUpdateRoomMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/livekit_api.proto",
}
