// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.8.0
// source: v1/enum.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiscountType 할인 타입
type DiscountType int32

const (
	// 퍼센트
	DiscountType_PERCENT DiscountType = 0
	// 값
	DiscountType_VALUE DiscountType = 1
)

// Enum value maps for DiscountType.
var (
	DiscountType_name = map[int32]string{
		0: "PERCENT",
		1: "VALUE",
	}
	DiscountType_value = map[string]int32{
		"PERCENT": 0,
		"VALUE":   1,
	}
)

func (x DiscountType) Enum() *DiscountType {
	p := new(DiscountType)
	*p = x
	return p
}

func (x DiscountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscountType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[0].Descriptor()
}

func (DiscountType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[0]
}

func (x DiscountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscountType.Descriptor instead.
func (DiscountType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{0}
}

// ProjectCodeType 코드 타입
type ProjectCodeType int32

const (
	ProjectCodeType_SCRATCH ProjectCodeType = 0
	ProjectCodeType_ENTRY   ProjectCodeType = 1
	ProjectCodeType_PYMODI  ProjectCodeType = 2
)

// Enum value maps for ProjectCodeType.
var (
	ProjectCodeType_name = map[int32]string{
		0: "SCRATCH",
		1: "ENTRY",
		2: "PYMODI",
	}
	ProjectCodeType_value = map[string]int32{
		"SCRATCH": 0,
		"ENTRY":   1,
		"PYMODI":  2,
	}
)

func (x ProjectCodeType) Enum() *ProjectCodeType {
	p := new(ProjectCodeType)
	*p = x
	return p
}

func (x ProjectCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[1].Descriptor()
}

func (ProjectCodeType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[1]
}

func (x ProjectCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectCodeType.Descriptor instead.
func (ProjectCodeType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{1}
}

// VideoType 비디오 타입
type VideoType int32

const (
	VideoType_HLS     VideoType = 0
	VideoType_DASH    VideoType = 1
	VideoType_YOUTUBE VideoType = 2
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0: "HLS",
		1: "DASH",
		2: "YOUTUBE",
	}
	VideoType_value = map[string]int32{
		"HLS":     0,
		"DASH":    1,
		"YOUTUBE": 2,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[2].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[2]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{2}
}

// LessonType 강의 타입
type LessonType int32

const (
	LessonType_LESSON            LessonType = 0
	LessonType_LESSON_CURRICULUM LessonType = 1
	LessonType_LESSON_BOOK       LessonType = 2
	LessonType_LESSON_NONE       LessonType = 3
)

// Enum value maps for LessonType.
var (
	LessonType_name = map[int32]string{
		0: "LESSON",
		1: "LESSON_CURRICULUM",
		2: "LESSON_BOOK",
		3: "LESSON_NONE",
	}
	LessonType_value = map[string]int32{
		"LESSON":            0,
		"LESSON_CURRICULUM": 1,
		"LESSON_BOOK":       2,
		"LESSON_NONE":       3,
	}
)

func (x LessonType) Enum() *LessonType {
	p := new(LessonType)
	*p = x
	return p
}

func (x LessonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[3].Descriptor()
}

func (LessonType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[3]
}

func (x LessonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonType.Descriptor instead.
func (LessonType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{3}
}

// ServiceType 서비스 이용 타입
type ServiceType int32

const (
	//
	ServiceType_NONE_TYPE ServiceType = 0
	// LMS용
	ServiceType_LMS ServiceType = 1
	// 매이킹팩
	ServiceType_MAKING_PACK ServiceType = 2
	// 센게이지
	ServiceType_CENGAGE ServiceType = 3
	// 브릭팩
	ServiceType_BRICK_PACK ServiceType = 4
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "NONE_TYPE",
		1: "LMS",
		2: "MAKING_PACK",
		3: "CENGAGE",
		4: "BRICK_PACK",
	}
	ServiceType_value = map[string]int32{
		"NONE_TYPE":   0,
		"LMS":         1,
		"MAKING_PACK": 2,
		"CENGAGE":     3,
		"BRICK_PACK":  4,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[4].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[4]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{4}
}

// 등급/레벨 타입
type LessonLevelType int32

const (
	//
	LessonLevelType_NONE_LEVEL LessonLevelType = 0
	// 초급
	LessonLevelType_BEGINNING_LEVEL LessonLevelType = 1
	// 중급
	LessonLevelType_INTERMEDIATE_LEVEL LessonLevelType = 2
	// 고급
	LessonLevelType_HIGH_LEVEL LessonLevelType = 3
)

// Enum value maps for LessonLevelType.
var (
	LessonLevelType_name = map[int32]string{
		0: "NONE_LEVEL",
		1: "BEGINNING_LEVEL",
		2: "INTERMEDIATE_LEVEL",
		3: "HIGH_LEVEL",
	}
	LessonLevelType_value = map[string]int32{
		"NONE_LEVEL":         0,
		"BEGINNING_LEVEL":    1,
		"INTERMEDIATE_LEVEL": 2,
		"HIGH_LEVEL":         3,
	}
)

func (x LessonLevelType) Enum() *LessonLevelType {
	p := new(LessonLevelType)
	*p = x
	return p
}

func (x LessonLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[5].Descriptor()
}

func (LessonLevelType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[5]
}

func (x LessonLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonLevelType.Descriptor instead.
func (LessonLevelType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{5}
}

// 그룹 타입
type LessonGroupType int32

const (
	//
	LessonGroupType_NONE_GROUP LessonGroupType = 0
	// 유아
	LessonGroupType_PRE_SCHOOLER_GROUP LessonGroupType = 1
	// 초등 초급
	LessonGroupType_ELEMENT_BEGINNING_GROUP LessonGroupType = 2
	// 초등 고급
	LessonGroupType_ELEMENT_HIGH_GROUP LessonGroupType = 3
	// 중등
	LessonGroupType_MIDDLE_SCHOOLER_GROUP LessonGroupType = 4
	// 고등
	LessonGroupType_HIGH_SCHOOLER_GROUP LessonGroupType = 5
)

// Enum value maps for LessonGroupType.
var (
	LessonGroupType_name = map[int32]string{
		0: "NONE_GROUP",
		1: "PRE_SCHOOLER_GROUP",
		2: "ELEMENT_BEGINNING_GROUP",
		3: "ELEMENT_HIGH_GROUP",
		4: "MIDDLE_SCHOOLER_GROUP",
		5: "HIGH_SCHOOLER_GROUP",
	}
	LessonGroupType_value = map[string]int32{
		"NONE_GROUP":              0,
		"PRE_SCHOOLER_GROUP":      1,
		"ELEMENT_BEGINNING_GROUP": 2,
		"ELEMENT_HIGH_GROUP":      3,
		"MIDDLE_SCHOOLER_GROUP":   4,
		"HIGH_SCHOOLER_GROUP":     5,
	}
)

func (x LessonGroupType) Enum() *LessonGroupType {
	p := new(LessonGroupType)
	*p = x
	return p
}

func (x LessonGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[6].Descriptor()
}

func (LessonGroupType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[6]
}

func (x LessonGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonGroupType.Descriptor instead.
func (LessonGroupType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{6}
}

type LessonPlanViewType int32

const (
	//
	LessonPlanViewType_LESSON_PLAN_NONE_VIEW LessonPlanViewType = 0
	//
	LessonPlanViewType_LESSON_PLAN_SLIDE_VIEW LessonPlanViewType = 1
)

// Enum value maps for LessonPlanViewType.
var (
	LessonPlanViewType_name = map[int32]string{
		0: "LESSON_PLAN_NONE_VIEW",
		1: "LESSON_PLAN_SLIDE_VIEW",
	}
	LessonPlanViewType_value = map[string]int32{
		"LESSON_PLAN_NONE_VIEW":  0,
		"LESSON_PLAN_SLIDE_VIEW": 1,
	}
)

func (x LessonPlanViewType) Enum() *LessonPlanViewType {
	p := new(LessonPlanViewType)
	*p = x
	return p
}

func (x LessonPlanViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonPlanViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[7].Descriptor()
}

func (LessonPlanViewType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[7]
}

func (x LessonPlanViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonPlanViewType.Descriptor instead.
func (LessonPlanViewType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{7}
}

// LessonPlanContentType 컨텐츠 타입
type LessonPlanContentType int32

const (
	//
	LessonPlanContentType_NONE_CONTENT LessonPlanContentType = 0
	// 기본형 컨텐츠
	LessonPlanContentType_BASE_CONTENT LessonPlanContentType = 1
	// 비디오 컨텐츠
	LessonPlanContentType_VIDEO_CONTENT LessonPlanContentType = 2
	// 멀티 여러개 컨텐츠
	LessonPlanContentType_MULTI_CONTENT LessonPlanContentType = 3
)

// Enum value maps for LessonPlanContentType.
var (
	LessonPlanContentType_name = map[int32]string{
		0: "NONE_CONTENT",
		1: "BASE_CONTENT",
		2: "VIDEO_CONTENT",
		3: "MULTI_CONTENT",
	}
	LessonPlanContentType_value = map[string]int32{
		"NONE_CONTENT":  0,
		"BASE_CONTENT":  1,
		"VIDEO_CONTENT": 2,
		"MULTI_CONTENT": 3,
	}
)

func (x LessonPlanContentType) Enum() *LessonPlanContentType {
	p := new(LessonPlanContentType)
	*p = x
	return p
}

func (x LessonPlanContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonPlanContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[8].Descriptor()
}

func (LessonPlanContentType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[8]
}

func (x LessonPlanContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonPlanContentType.Descriptor instead.
func (LessonPlanContentType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{8}
}

// LessonContentViewType 컨텐츠 뷰 타입
type LessonContentViewType int32

const (
	//
	LessonContentViewType_NONE_VIEW LessonContentViewType = 0
	// 비디오
	LessonContentViewType_VIDEO_VIEW LessonContentViewType = 1
	// 코딩화면 뷰
	LessonContentViewType_CODING_VIEW LessonContentViewType = 2
	// 기본형 전체화면
	LessonContentViewType_NORMAL_VIEW LessonContentViewType = 3
	// 실습화면
	LessonContentViewType_PRACTICE_CODING_VIEW LessonContentViewType = 4
	// 가로줄 1 세로줄 아래 반 Deprecate
	LessonContentViewType_HORIZON_FULL_VERTICAL_DOWN_HALF_VIEW LessonContentViewType = 5
	// 세로줄 1 가로줄 오른쪽 반 Deprecate
	LessonContentViewType_VERTICAL_FULL_HORIZON_RIGHT_HALF_VIEW LessonContentViewType = 6
	// 세로줄 1 Deprecate
	LessonContentViewType_VERTICAL_FULL_VIEW LessonContentViewType = 7
	// 세로줄 2 Deprecate
	LessonContentViewType_VERTICAL_TWO_FULL_VIEW LessonContentViewType = 8
	// 가로줄 1 세로줄 1  Deprecate
	LessonContentViewType_HORIZON_FULL_VERTICAL_FULL_VIEW LessonContentViewType = 9
	// 가로줄 1 Deprecate
	LessonContentViewType_HORIZON_FULL_VIEW LessonContentViewType = 10
	// Slide View Deprecate
	LessonContentViewType_SLIDE_VIEW LessonContentViewType = 11
)

// Enum value maps for LessonContentViewType.
var (
	LessonContentViewType_name = map[int32]string{
		0:  "NONE_VIEW",
		1:  "VIDEO_VIEW",
		2:  "CODING_VIEW",
		3:  "NORMAL_VIEW",
		4:  "PRACTICE_CODING_VIEW",
		5:  "HORIZON_FULL_VERTICAL_DOWN_HALF_VIEW",
		6:  "VERTICAL_FULL_HORIZON_RIGHT_HALF_VIEW",
		7:  "VERTICAL_FULL_VIEW",
		8:  "VERTICAL_TWO_FULL_VIEW",
		9:  "HORIZON_FULL_VERTICAL_FULL_VIEW",
		10: "HORIZON_FULL_VIEW",
		11: "SLIDE_VIEW",
	}
	LessonContentViewType_value = map[string]int32{
		"NONE_VIEW":                             0,
		"VIDEO_VIEW":                            1,
		"CODING_VIEW":                           2,
		"NORMAL_VIEW":                           3,
		"PRACTICE_CODING_VIEW":                  4,
		"HORIZON_FULL_VERTICAL_DOWN_HALF_VIEW":  5,
		"VERTICAL_FULL_HORIZON_RIGHT_HALF_VIEW": 6,
		"VERTICAL_FULL_VIEW":                    7,
		"VERTICAL_TWO_FULL_VIEW":                8,
		"HORIZON_FULL_VERTICAL_FULL_VIEW":       9,
		"HORIZON_FULL_VIEW":                     10,
		"SLIDE_VIEW":                            11,
	}
)

func (x LessonContentViewType) Enum() *LessonContentViewType {
	p := new(LessonContentViewType)
	*p = x
	return p
}

func (x LessonContentViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonContentViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[9].Descriptor()
}

func (LessonContentViewType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[9]
}

func (x LessonContentViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonContentViewType.Descriptor instead.
func (LessonContentViewType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{9}
}

// TrueFalseType 사용여부 타입
type TrueFalseType int32

const (
	// true
	TrueFalseType_T TrueFalseType = 0
	// false
	TrueFalseType_F TrueFalseType = 1
)

// Enum value maps for TrueFalseType.
var (
	TrueFalseType_name = map[int32]string{
		0: "T",
		1: "F",
	}
	TrueFalseType_value = map[string]int32{
		"T": 0,
		"F": 1,
	}
)

func (x TrueFalseType) Enum() *TrueFalseType {
	p := new(TrueFalseType)
	*p = x
	return p
}

func (x TrueFalseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrueFalseType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[10].Descriptor()
}

func (TrueFalseType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[10]
}

func (x TrueFalseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrueFalseType.Descriptor instead.
func (TrueFalseType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{10}
}

// ClassroomOpenType 오픈 타입
type ClassroomOpenType int32

const (
	ClassroomOpenType_CLASSROOM_OPEN  ClassroomOpenType = 0
	ClassroomOpenType_CLASSROOM_CLOSE ClassroomOpenType = 1
)

// Enum value maps for ClassroomOpenType.
var (
	ClassroomOpenType_name = map[int32]string{
		0: "CLASSROOM_OPEN",
		1: "CLASSROOM_CLOSE",
	}
	ClassroomOpenType_value = map[string]int32{
		"CLASSROOM_OPEN":  0,
		"CLASSROOM_CLOSE": 1,
	}
)

func (x ClassroomOpenType) Enum() *ClassroomOpenType {
	p := new(ClassroomOpenType)
	*p = x
	return p
}

func (x ClassroomOpenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassroomOpenType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[11].Descriptor()
}

func (ClassroomOpenType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[11]
}

func (x ClassroomOpenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassroomOpenType.Descriptor instead.
func (ClassroomOpenType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{11}
}

// LessonOpenType 오픈 타입
type LessonOpenType int32

const (
	LessonOpenType_OPEN   LessonOpenType = 0
	LessonOpenType_CLOSE  LessonOpenType = 1
	LessonOpenType_ALL    LessonOpenType = 2
	LessonOpenType_DELETE LessonOpenType = 3
)

// Enum value maps for LessonOpenType.
var (
	LessonOpenType_name = map[int32]string{
		0: "OPEN",
		1: "CLOSE",
		2: "ALL",
		3: "DELETE",
	}
	LessonOpenType_value = map[string]int32{
		"OPEN":   0,
		"CLOSE":  1,
		"ALL":    2,
		"DELETE": 3,
	}
)

func (x LessonOpenType) Enum() *LessonOpenType {
	p := new(LessonOpenType)
	*p = x
	return p
}

func (x LessonOpenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonOpenType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[12].Descriptor()
}

func (LessonOpenType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[12]
}

func (x LessonOpenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonOpenType.Descriptor instead.
func (LessonOpenType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{12}
}

// LessonPlanDataType 컨텐츠 계획 데이타 타입
type LessonPlanDataType int32

const (
	LessonPlanDataType_BASE   LessonPlanDataType = 0
	LessonPlanDataType_TEXT   LessonPlanDataType = 1
	LessonPlanDataType_IMAGE  LessonPlanDataType = 2
	LessonPlanDataType_VIDEO  LessonPlanDataType = 3
	LessonPlanDataType_CODING LessonPlanDataType = 4
)

// Enum value maps for LessonPlanDataType.
var (
	LessonPlanDataType_name = map[int32]string{
		0: "BASE",
		1: "TEXT",
		2: "IMAGE",
		3: "VIDEO",
		4: "CODING",
	}
	LessonPlanDataType_value = map[string]int32{
		"BASE":   0,
		"TEXT":   1,
		"IMAGE":  2,
		"VIDEO":  3,
		"CODING": 4,
	}
)

func (x LessonPlanDataType) Enum() *LessonPlanDataType {
	p := new(LessonPlanDataType)
	*p = x
	return p
}

func (x LessonPlanDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonPlanDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[13].Descriptor()
}

func (LessonPlanDataType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[13]
}

func (x LessonPlanDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonPlanDataType.Descriptor instead.
func (LessonPlanDataType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{13}
}

// LessonSummaryElementType 강의 설명 요소 타입 정의
type LessonSummaryElementType int32

const (
	// 자료수집/분석/표현
	LessonSummaryElementType_DATA_STRUCTURE_ELEMENT LessonSummaryElementType = 0
	// 문제 분해
	LessonSummaryElementType_ANALYSIS_ELEMENT LessonSummaryElementType = 1
	// 추상화
	LessonSummaryElementType_ABSTRACT_ELEMENT LessonSummaryElementType = 2
	// 알고리즘과 절차
	LessonSummaryElementType_ALGORITHM_ELEMENT LessonSummaryElementType = 3
	// 자동화
	LessonSummaryElementType_AUTOMATION_ELEMENT LessonSummaryElementType = 4
	// 시물레이션
	LessonSummaryElementType_SIMULATION_ELEMENT LessonSummaryElementType = 5
	// 병렬화
	LessonSummaryElementType_PARALLELISM_ELEMENT LessonSummaryElementType = 6
)

// Enum value maps for LessonSummaryElementType.
var (
	LessonSummaryElementType_name = map[int32]string{
		0: "DATA_STRUCTURE_ELEMENT",
		1: "ANALYSIS_ELEMENT",
		2: "ABSTRACT_ELEMENT",
		3: "ALGORITHM_ELEMENT",
		4: "AUTOMATION_ELEMENT",
		5: "SIMULATION_ELEMENT",
		6: "PARALLELISM_ELEMENT",
	}
	LessonSummaryElementType_value = map[string]int32{
		"DATA_STRUCTURE_ELEMENT": 0,
		"ANALYSIS_ELEMENT":       1,
		"ABSTRACT_ELEMENT":       2,
		"ALGORITHM_ELEMENT":      3,
		"AUTOMATION_ELEMENT":     4,
		"SIMULATION_ELEMENT":     5,
		"PARALLELISM_ELEMENT":    6,
	}
)

func (x LessonSummaryElementType) Enum() *LessonSummaryElementType {
	p := new(LessonSummaryElementType)
	*p = x
	return p
}

func (x LessonSummaryElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonSummaryElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[14].Descriptor()
}

func (LessonSummaryElementType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[14]
}

func (x LessonSummaryElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonSummaryElementType.Descriptor instead.
func (LessonSummaryElementType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{14}
}

// LessonHardwareType 하드웨어 타입
type LessonHardwareType int32

const (
	// 없음
	LessonHardwareType_NONE_HARDWARE LessonHardwareType = 0
	// 모디1
	LessonHardwareType_MODI1_HARDWARE LessonHardwareType = 1
	// 모디2
	LessonHardwareType_MODI2_HARDWARE LessonHardwareType = 2
	// 라즈베리 파이
	LessonHardwareType_RASPBERRY_HARDWARE LessonHardwareType = 3
	// 마이크로빗
	LessonHardwareType_MICROBIT_HARDWARE LessonHardwareType = 4
	// HELLO_AI_HARDWARE
	LessonHardwareType_HELLO_AI_HARDWARE LessonHardwareType = 5
)

// Enum value maps for LessonHardwareType.
var (
	LessonHardwareType_name = map[int32]string{
		0: "NONE_HARDWARE",
		1: "MODI1_HARDWARE",
		2: "MODI2_HARDWARE",
		3: "RASPBERRY_HARDWARE",
		4: "MICROBIT_HARDWARE",
		5: "HELLO_AI_HARDWARE",
	}
	LessonHardwareType_value = map[string]int32{
		"NONE_HARDWARE":      0,
		"MODI1_HARDWARE":     1,
		"MODI2_HARDWARE":     2,
		"RASPBERRY_HARDWARE": 3,
		"MICROBIT_HARDWARE":  4,
		"HELLO_AI_HARDWARE":  5,
	}
)

func (x LessonHardwareType) Enum() *LessonHardwareType {
	p := new(LessonHardwareType)
	*p = x
	return p
}

func (x LessonHardwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonHardwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[15].Descriptor()
}

func (LessonHardwareType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[15]
}

func (x LessonHardwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonHardwareType.Descriptor instead.
func (LessonHardwareType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{15}
}

// LessonCodingType 코딩 타입
type LessonCodingType int32

const (
	// 엔트리
	LessonCodingType_ENTRY_CODING LessonCodingType = 0
	// 스크레치
	LessonCodingType_SCRATCH_CODING LessonCodingType = 1
	// PyMODI
	LessonCodingType_PYMODI_CODING LessonCodingType = 2
)

// Enum value maps for LessonCodingType.
var (
	LessonCodingType_name = map[int32]string{
		0: "ENTRY_CODING",
		1: "SCRATCH_CODING",
		2: "PYMODI_CODING",
	}
	LessonCodingType_value = map[string]int32{
		"ENTRY_CODING":   0,
		"SCRATCH_CODING": 1,
		"PYMODI_CODING":  2,
	}
)

func (x LessonCodingType) Enum() *LessonCodingType {
	p := new(LessonCodingType)
	*p = x
	return p
}

func (x LessonCodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonCodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[16].Descriptor()
}

func (LessonCodingType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[16]
}

func (x LessonCodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonCodingType.Descriptor instead.
func (LessonCodingType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{16}
}

// CreationType
type CreationType int32

const (
	CreationType_FREE                   CreationType = 0
	CreationType_BINGO_MACHINE          CreationType = 1
	CreationType_RANDOM_ROULETTE        CreationType = 2
	CreationType_ROTATING_PENCIL_HOLDER CreationType = 3
	CreationType_JOYTROPE               CreationType = 4
	CreationType_LED_TIMER              CreationType = 5
	CreationType_MOOD_LAMP              CreationType = 6
	CreationType_LED_METRONIUM          CreationType = 7
	CreationType_SAFE                   CreationType = 8
	CreationType_FISHING                CreationType = 9
	CreationType_SURFING_BOT            CreationType = 10
	CreationType_TONGS_ARM              CreationType = 11
	CreationType_RC_CAR                 CreationType = 12
	CreationType_PIRATE_SHIP            CreationType = 13
	CreationType_CROCODILE_TEETH        CreationType = 14
	CreationType_LIGHTHOUSE             CreationType = 15
	CreationType_HELICOPTER             CreationType = 16
	CreationType_MONSTER_TRUCK          CreationType = 17
)

// Enum value maps for CreationType.
var (
	CreationType_name = map[int32]string{
		0:  "FREE",
		1:  "BINGO_MACHINE",
		2:  "RANDOM_ROULETTE",
		3:  "ROTATING_PENCIL_HOLDER",
		4:  "JOYTROPE",
		5:  "LED_TIMER",
		6:  "MOOD_LAMP",
		7:  "LED_METRONIUM",
		8:  "SAFE",
		9:  "FISHING",
		10: "SURFING_BOT",
		11: "TONGS_ARM",
		12: "RC_CAR",
		13: "PIRATE_SHIP",
		14: "CROCODILE_TEETH",
		15: "LIGHTHOUSE",
		16: "HELICOPTER",
		17: "MONSTER_TRUCK",
	}
	CreationType_value = map[string]int32{
		"FREE":                   0,
		"BINGO_MACHINE":          1,
		"RANDOM_ROULETTE":        2,
		"ROTATING_PENCIL_HOLDER": 3,
		"JOYTROPE":               4,
		"LED_TIMER":              5,
		"MOOD_LAMP":              6,
		"LED_METRONIUM":          7,
		"SAFE":                   8,
		"FISHING":                9,
		"SURFING_BOT":            10,
		"TONGS_ARM":              11,
		"RC_CAR":                 12,
		"PIRATE_SHIP":            13,
		"CROCODILE_TEETH":        14,
		"LIGHTHOUSE":             15,
		"HELICOPTER":             16,
		"MONSTER_TRUCK":          17,
	}
)

func (x CreationType) Enum() *CreationType {
	p := new(CreationType)
	*p = x
	return p
}

func (x CreationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreationType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[17].Descriptor()
}

func (CreationType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[17]
}

func (x CreationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreationType.Descriptor instead.
func (CreationType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{17}
}

// LIVEKIT TYPE
type LivekitParticipantStateType int32

const (
	LivekitParticipantStateType_JOINING      LivekitParticipantStateType = 0
	LivekitParticipantStateType_JOINED       LivekitParticipantStateType = 1
	LivekitParticipantStateType_ACTIVE       LivekitParticipantStateType = 2
	LivekitParticipantStateType_DISCONNECTED LivekitParticipantStateType = 3
)

// Enum value maps for LivekitParticipantStateType.
var (
	LivekitParticipantStateType_name = map[int32]string{
		0: "JOINING",
		1: "JOINED",
		2: "ACTIVE",
		3: "DISCONNECTED",
	}
	LivekitParticipantStateType_value = map[string]int32{
		"JOINING":      0,
		"JOINED":       1,
		"ACTIVE":       2,
		"DISCONNECTED": 3,
	}
)

func (x LivekitParticipantStateType) Enum() *LivekitParticipantStateType {
	p := new(LivekitParticipantStateType)
	*p = x
	return p
}

func (x LivekitParticipantStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivekitParticipantStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[18].Descriptor()
}

func (LivekitParticipantStateType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[18]
}

func (x LivekitParticipantStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivekitParticipantStateType.Descriptor instead.
func (LivekitParticipantStateType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{18}
}

type LivekitTrackSourceType int32

const (
	LivekitTrackSourceType_UNKNOWN            LivekitTrackSourceType = 0
	LivekitTrackSourceType_CAMERA             LivekitTrackSourceType = 1
	LivekitTrackSourceType_MICROPHONE         LivekitTrackSourceType = 2
	LivekitTrackSourceType_SCREEN_SHARE       LivekitTrackSourceType = 3
	LivekitTrackSourceType_SCREEN_SHARE_AUDIO LivekitTrackSourceType = 4
)

// Enum value maps for LivekitTrackSourceType.
var (
	LivekitTrackSourceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CAMERA",
		2: "MICROPHONE",
		3: "SCREEN_SHARE",
		4: "SCREEN_SHARE_AUDIO",
	}
	LivekitTrackSourceType_value = map[string]int32{
		"UNKNOWN":            0,
		"CAMERA":             1,
		"MICROPHONE":         2,
		"SCREEN_SHARE":       3,
		"SCREEN_SHARE_AUDIO": 4,
	}
)

func (x LivekitTrackSourceType) Enum() *LivekitTrackSourceType {
	p := new(LivekitTrackSourceType)
	*p = x
	return p
}

func (x LivekitTrackSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivekitTrackSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[19].Descriptor()
}

func (LivekitTrackSourceType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[19]
}

func (x LivekitTrackSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivekitTrackSourceType.Descriptor instead.
func (LivekitTrackSourceType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{19}
}

type LivekitVideoQualityType int32

const (
	LivekitVideoQualityType_LOW    LivekitVideoQualityType = 0
	LivekitVideoQualityType_MEDIUM LivekitVideoQualityType = 1
	LivekitVideoQualityType_HIGH   LivekitVideoQualityType = 2
)

// Enum value maps for LivekitVideoQualityType.
var (
	LivekitVideoQualityType_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
	}
	LivekitVideoQualityType_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
	}
)

func (x LivekitVideoQualityType) Enum() *LivekitVideoQualityType {
	p := new(LivekitVideoQualityType)
	*p = x
	return p
}

func (x LivekitVideoQualityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivekitVideoQualityType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[20].Descriptor()
}

func (LivekitVideoQualityType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[20]
}

func (x LivekitVideoQualityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivekitVideoQualityType.Descriptor instead.
func (LivekitVideoQualityType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{20}
}

type UserLoginType int32

const (
	UserLoginType_EMAIL  UserLoginType = 0
	UserLoginType_KAKAO  UserLoginType = 1
	UserLoginType_GOOGLE UserLoginType = 2
)

// Enum value maps for UserLoginType.
var (
	UserLoginType_name = map[int32]string{
		0: "EMAIL",
		1: "KAKAO",
		2: "GOOGLE",
	}
	UserLoginType_value = map[string]int32{
		"EMAIL":  0,
		"KAKAO":  1,
		"GOOGLE": 2,
	}
)

func (x UserLoginType) Enum() *UserLoginType {
	p := new(UserLoginType)
	*p = x
	return p
}

func (x UserLoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserLoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[21].Descriptor()
}

func (UserLoginType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[21]
}

func (x UserLoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserLoginType.Descriptor instead.
func (UserLoginType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{21}
}

type LivekitDataPacketKindType int32

const (
	LivekitDataPacketKindType_RELIABLE LivekitDataPacketKindType = 0
	LivekitDataPacketKindType_LOSSY    LivekitDataPacketKindType = 1
)

// Enum value maps for LivekitDataPacketKindType.
var (
	LivekitDataPacketKindType_name = map[int32]string{
		0: "RELIABLE",
		1: "LOSSY",
	}
	LivekitDataPacketKindType_value = map[string]int32{
		"RELIABLE": 0,
		"LOSSY":    1,
	}
)

func (x LivekitDataPacketKindType) Enum() *LivekitDataPacketKindType {
	p := new(LivekitDataPacketKindType)
	*p = x
	return p
}

func (x LivekitDataPacketKindType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivekitDataPacketKindType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[22].Descriptor()
}

func (LivekitDataPacketKindType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[22]
}

func (x LivekitDataPacketKindType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivekitDataPacketKindType.Descriptor instead.
func (LivekitDataPacketKindType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{22}
}

type CourseProductDType int32

const (
	CourseProductDType_MERCHANDISE CourseProductDType = 0
	CourseProductDType_COURSE      CourseProductDType = 1
)

// Enum value maps for CourseProductDType.
var (
	CourseProductDType_name = map[int32]string{
		0: "MERCHANDISE",
		1: "COURSE",
	}
	CourseProductDType_value = map[string]int32{
		"MERCHANDISE": 0,
		"COURSE":      1,
	}
)

func (x CourseProductDType) Enum() *CourseProductDType {
	p := new(CourseProductDType)
	*p = x
	return p
}

func (x CourseProductDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseProductDType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[23].Descriptor()
}

func (CourseProductDType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[23]
}

func (x CourseProductDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseProductDType.Descriptor instead.
func (CourseProductDType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{23}
}

type CourseProductPurchaseType int32

const (
	CourseProductPurchaseType_PURCHASE CourseProductPurchaseType = 0
	CourseProductPurchaseType_RENTAL   CourseProductPurchaseType = 1
)

// Enum value maps for CourseProductPurchaseType.
var (
	CourseProductPurchaseType_name = map[int32]string{
		0: "PURCHASE",
		1: "RENTAL",
	}
	CourseProductPurchaseType_value = map[string]int32{
		"PURCHASE": 0,
		"RENTAL":   1,
	}
)

func (x CourseProductPurchaseType) Enum() *CourseProductPurchaseType {
	p := new(CourseProductPurchaseType)
	*p = x
	return p
}

func (x CourseProductPurchaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseProductPurchaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[24].Descriptor()
}

func (CourseProductPurchaseType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[24]
}

func (x CourseProductPurchaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseProductPurchaseType.Descriptor instead.
func (CourseProductPurchaseType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{24}
}

type CourseProductStateType int32

const (
	CourseProductStateType_ON      CourseProductStateType = 0
	CourseProductStateType_OFF     CourseProductStateType = 1
	CourseProductStateType_SOLDOUT CourseProductStateType = 2
)

// Enum value maps for CourseProductStateType.
var (
	CourseProductStateType_name = map[int32]string{
		0: "ON",
		1: "OFF",
		2: "SOLDOUT",
	}
	CourseProductStateType_value = map[string]int32{
		"ON":      0,
		"OFF":     1,
		"SOLDOUT": 2,
	}
)

func (x CourseProductStateType) Enum() *CourseProductStateType {
	p := new(CourseProductStateType)
	*p = x
	return p
}

func (x CourseProductStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseProductStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[25].Descriptor()
}

func (CourseProductStateType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[25]
}

func (x CourseProductStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseProductStateType.Descriptor instead.
func (CourseProductStateType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{25}
}

type CurrencyType int32

const (
	CurrencyType_KRW CurrencyType = 0
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "KRW",
	}
	CurrencyType_value = map[string]int32{
		"KRW": 0,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_enum_proto_enumTypes[26].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_v1_enum_proto_enumTypes[26]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_v1_enum_proto_rawDescGZIP(), []int{26}
}

var File_v1_enum_proto protoreflect.FileDescriptor

var file_v1_enum_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x2a, 0x26, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x43, 0x52, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x4d, 0x4f, 0x44, 0x49,
	0x10, 0x02, 0x2a, 0x2b, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45, 0x10, 0x02, 0x2a,
	0x51, 0x0a, 0x0a, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x53,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x49, 0x43, 0x55, 0x4c, 0x55, 0x4d, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45,
	0x4e, 0x47, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x49, 0x43, 0x4b,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x2a, 0x5e, 0x0a, 0x0f, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x47, 0x48, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0xa2, 0x01, 0x0a, 0x0f, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x49, 0x44, 0x44,
	0x4c, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x4f,
	0x4f, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x05, 0x2a, 0x4b, 0x0a, 0x12,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x4c, 0x49,
	0x44, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x2a, 0x61, 0x0a, 0x15, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0xc7, 0x02, 0x0a,
	0x15, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x04, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x07, 0x12, 0x1a,
	0x0a, 0x16, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x09, 0x12,
	0x15, 0x0a, 0x11, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x0b, 0x2a, 0x1d, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x65, 0x46, 0x61,
	0x6c, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x54, 0x10, 0x00, 0x12, 0x05,
	0x0a, 0x01, 0x46, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f,
	0x6f, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x0e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a,
	0x4a, 0x0a, 0x12, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x18,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x42,
	0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x4f, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x41, 0x4c,
	0x4c, 0x45, 0x4c, 0x49, 0x53, 0x4d, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x2a, 0x95, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x45, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f,
	0x44, 0x49, 0x31, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x32, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x53, 0x50, 0x42, 0x45, 0x52, 0x52, 0x59, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x42, 0x49, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x41, 0x49, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x05, 0x2a, 0x4b, 0x0a, 0x10, 0x4c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x43, 0x52, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x59, 0x4d, 0x4f, 0x44, 0x49, 0x5f, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0xb7, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x4e, 0x47, 0x4f, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x52, 0x4f,
	0x55, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x4e, 0x43, 0x49, 0x4c, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x59, 0x54, 0x52, 0x4f, 0x50, 0x45,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x55,
	0x4d, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x46, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55,
	0x52, 0x46, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x54, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x4f, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x43,
	0x5f, 0x43, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x48, 0x49, 0x50, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x4f, 0x43, 0x4f,
	0x44, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x45, 0x54, 0x48, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x45, 0x4c, 0x49, 0x43, 0x4f, 0x50, 0x54, 0x45, 0x52, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x10, 0x11, 0x2a,
	0x54, 0x0a, 0x1b, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4a, 0x4f, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4a,
	0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x6b, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x04, 0x2a, 0x38, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x4b, 0x41,
	0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x2a,
	0x34, 0x0a, 0x19, 0x4c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f,
	0x53, 0x53, 0x59, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x2a,
	0x36, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f,
	0x4c, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x17, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10, 0x00,
	0x42, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x0a, 0x6c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x50,
	0x58, 0xaa, 0x02, 0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x2e, 0x76, 0x31, 0xca, 0x02,
	0x0a, 0x4c, 0x75, 0x78, 0x72, 0x6f, 0x62, 0x6f, 0x5c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1_enum_proto_rawDescOnce sync.Once
	file_v1_enum_proto_rawDescData = file_v1_enum_proto_rawDesc
)

func file_v1_enum_proto_rawDescGZIP() []byte {
	file_v1_enum_proto_rawDescOnce.Do(func() {
		file_v1_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_enum_proto_rawDescData)
	})
	return file_v1_enum_proto_rawDescData
}

var file_v1_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_v1_enum_proto_goTypes = []interface{}{
	(DiscountType)(0),                // 0: v1.DiscountType
	(ProjectCodeType)(0),             // 1: v1.ProjectCodeType
	(VideoType)(0),                   // 2: v1.VideoType
	(LessonType)(0),                  // 3: v1.LessonType
	(ServiceType)(0),                 // 4: v1.ServiceType
	(LessonLevelType)(0),             // 5: v1.LessonLevelType
	(LessonGroupType)(0),             // 6: v1.LessonGroupType
	(LessonPlanViewType)(0),          // 7: v1.LessonPlanViewType
	(LessonPlanContentType)(0),       // 8: v1.LessonPlanContentType
	(LessonContentViewType)(0),       // 9: v1.LessonContentViewType
	(TrueFalseType)(0),               // 10: v1.TrueFalseType
	(ClassroomOpenType)(0),           // 11: v1.ClassroomOpenType
	(LessonOpenType)(0),              // 12: v1.LessonOpenType
	(LessonPlanDataType)(0),          // 13: v1.LessonPlanDataType
	(LessonSummaryElementType)(0),    // 14: v1.LessonSummaryElementType
	(LessonHardwareType)(0),          // 15: v1.LessonHardwareType
	(LessonCodingType)(0),            // 16: v1.LessonCodingType
	(CreationType)(0),                // 17: v1.CreationType
	(LivekitParticipantStateType)(0), // 18: v1.LivekitParticipantStateType
	(LivekitTrackSourceType)(0),      // 19: v1.LivekitTrackSourceType
	(LivekitVideoQualityType)(0),     // 20: v1.LivekitVideoQualityType
	(UserLoginType)(0),               // 21: v1.UserLoginType
	(LivekitDataPacketKindType)(0),   // 22: v1.LivekitDataPacketKindType
	(CourseProductDType)(0),          // 23: v1.CourseProductDType
	(CourseProductPurchaseType)(0),   // 24: v1.CourseProductPurchaseType
	(CourseProductStateType)(0),      // 25: v1.CourseProductStateType
	(CurrencyType)(0),                // 26: v1.CurrencyType
}
var file_v1_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_v1_enum_proto_init() }
func file_v1_enum_proto_init() {
	if File_v1_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_enum_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_enum_proto_goTypes,
		DependencyIndexes: file_v1_enum_proto_depIdxs,
		EnumInfos:         file_v1_enum_proto_enumTypes,
	}.Build()
	File_v1_enum_proto = out.File
	file_v1_enum_proto_rawDesc = nil
	file_v1_enum_proto_goTypes = nil
	file_v1_enum_proto_depIdxs = nil
}
